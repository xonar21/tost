@using GR.Core.Extensions;
@using GR.Crm.PipeLines.Abstractions.Models;
@model PipeLine
@{ ViewData["Title"] = Model.Name; }

<Pipeline />

@section Scripts {
	<script src="https://unpkg.com/vue-draggable@1.0.9/lib/vue-draggable.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/handy-scroll@1.0.1/dist/handy-scroll.min.js"></script>
	<script src="~/themes/gear/js/components/table/table.js"></script>
	<script src="~/themes/gear/js/components/pageOptionsbar.js"></script>
	<script src="~/themes/gear/js/components/modal.js"></script>
	<script src="~/themes/gear/js/components/textBlock.js"></script>
	<script src="~/themes/gear/js/components/form-controls/textarea.js"></script>
	<script src="~/themes/gear/js/components/form-controls/input.js"></script>
	<script src="~/themes/gear/js/components//form-controls/file.js"></script>
	<script src="~/themes/gear/js/components/form-controls/datepicker.js"></script>
	<script src="~/themes/gear/js/components//form-controls/radioInput.js"></script>
	<script src="~/themes/gear/js/components//form-controls/checkbox.js"></script>
	<script src="~/themes/gear/js/components/form-controls/select.js"></script>
	<script src="~/themes/gear/js/components/phone-input/addHideInput.js"></script>
	<script src="~/themes/gear/js/components/phone-input/phone-input.js"></script>
	<script src="~/themes/gear/js/components/dropdown.js"></script>
	<script src="~/themes/gear/js/components/phone-input/switcher.js"></script>
	<script>
        const pipeLineObj = JSON.parse(`@Html.Raw(Model.SerializeAsJson())`);
        const taskDateFormat = 'YYYY/MM/DD';
        const taskDatePickerFormat = 'yyyy/mm/dd';
        const currentUserId = '@ViewBag.CurrentUserId';
        const utils = {
            convertToSelectList: array => {
                return array.map(e => {
                    const newObj = {
                        label: e.name,
                        value: e.id
                    }
                    return newObj;
                });
            },
            groupBy: (array, key) => {
                return array.reduce(function (result, x) {
                    (result[x[key]] = result[x[key]] || []).push(x);
                    return result;
                }, {});
            },
            findObjectByPropValue: (array, value, prop) => {
                return array.find(x => x[prop] === value);
            },
            changeObjPropInArrayById: (array, value, prop, id, idProp) => {
                for (var i in array) {
                    if (array[i][idProp] == id) {
                        array[i][prop] = value;
                        break;
                    }
                }
            },
            setBodyProgressCursor() {
                $("body").css("cursor", "progress");
            },
            unsetBodyProgressCursor() {
                $("body").css("cursor", "default");
            }
        };

        Vue.use(VueDraggable.default);
        Vue.component('Pipeline', {
            template: "#pipeline-template",
            data() {
                return {
                    searchTimeoutId: null,
					jobPositionsListSelect: [],
                    users: [],
                    stages: [],
                    modalLeadKey: 0,
					pageChange: 0,
                    modalNoGoStateKey: 0,
                    modalStageKey: 0,
                    modalStateKey: 0,
                    modalTeamKey: 0,
                    modalTaskKey: 0,
                    modalDocumentKey: 0,
                    modalOrgKey: 0,
                    modalImportKey: 0,
                    modalsameOrgKey: 0,
                    modalContactKey: 0,
                    pipelineId: pipeLineObj.id,
                    importLeadModal: {
                        importDelimiter: [{ name: 'Comma', id: 1 }, { name: 'Semicolon', id: 2 }, { name: 'Tabulation', id: 3 }],
                        importParameter: [],
                        importProperties: [{ name: 'Name', id: 1 },
                        { name: 'ClarificationDeadLine', id: 5 }, { name: 'Organization', id: 6 }, { name: 'Contact', id: 8 }, { name: 'PipeLine', id: 17 },
                        { name: 'Stage', id: 18 }, { name: 'LeadState', id: 19 }, { name: 'ProductType', id: 20 }, { name: 'ServiceType', id: 21 },
                        { name: 'SolutionType', id: 22 }, { name: 'Source', id: 23 }, { name: 'TechnologyType', id: 24 }, { name: 'Value', id: 25 },
                        { name: 'CurrencyCode', id: 26 }],
                        importEncoding: [{ name: 'UTF-8', id: 10 }],
                        sourceImportProperties: [],
                        importHideSelects: true,
                        fileExtension: '',
                        sourceImportDelimiter: null,
                        sourceImportEncoding: null,
                        sourceImportAction: null,
                        sourceImportParameter: [],
                        action: true,
                        file: null,
                        checkExtension: false,
                        checkState: true
                    },
                    mergeOrgModal: {
                        mergeSelectLeads: [],
                        mergeSelectOrganizations: [],
                        mergeSelectContacts: [],
                        mergeSelectLeadStates: [],
                        mergeSelectLeadMembers: [],
                        mergeSelectOwners: [],
                        mergeSelectProducts: [],
                        mergeSelectServiceTypes: [],
                        mergeSelectSolutionTypes: [],
                        mergeSelectSources: [],
                        mergeSelectTeams: [],

                        mergeSelectLeadsInitial: [],
                        mergeSelectOrganizationsInitial: [],
                        mergeSelectContactsInitial: [],
                        mergeSelectLeadStatesInitial: [],
                        mergeSelectLeadMembersInitial: [],
                        mergeSelectOwnersInitial: [],
                        mergeSelectProductsInitial: [],
                        mergeSelectServiceTypesInitial: [],
                        mergeSelectSolutionTypesInitial: [],
                        mergeSelectSourcesInitial: [],
                        mergeSelectTeamsInitial: [],
                        mergeSelectTechnologyTypesInitial: [],
                        mergeSelectTechnologyTypes: [],
                        mergeSelectSourceLead: null,
                        mergeSelectSourceOrganization: null,
                        mergeSelectSourceContact: null,
                        mergeSelectSourceLeadMembers: [],
                        mergeSelectSourceOwners: null,
                        mergeSelectSourceProduct: null,
                        mergeSelectSourceLeadStates: [],
                        mergeSelectSourceServiceType: null,
                        mergeSelectSourceSolutionType: null,
                        mergeSelectSourceSource: null,
                        mergeSelectSourceTeam: null,
                        mergeSelectSourceTechnologyType: null,
                        mergeTargetLead: null,
                        mergeRemainingLeads: [],
                        mergeMapper: []
                    },
                    //Table config
                    apiUrl: apiEndpoints.Leads.GetPaginatedLeadsByPipeLineId,
                    httpMethod: 'post',
                    tableFields: [
                        {
                            name: 'leadState',
                            title: 'State',
                            visible: true,
                        },
                        {
                            name: 'stageName',
                            sortField: 'stageName',
                            title: 'Stage',
                            visible: true
                        },
                        {
                            name: 'name',
                            title: 'Name',
                            sortField: 'name',
                            visible: true
                        },
                        {
                            name: 'organizationName',
                            title: 'Organization',
                            visible: true,
                            sortField: 'organizationName'
                        },
                        {
                            name: 'value',
                            title: 'Value',
                            visible: true
                        },
                        {
                            name: 'currencyCode',
                            title: 'Currency',
                            visible: true
                        },
                        {
                            name: 'leadMembers',
                            title: 'Owner',
                            visible: true,
                            dataClass: 'td-users',
                            formatter: value => {
								if (value && utils.findObjectByPropValue(value, this.defaultOwnerRoleId, 'teamRoleId')) {
                                    return `
                                        <a class="btn btn-outline-primary user-rectangle"
                                           href="#"
                                           title="${this.extractTeamOwnerName(value).fullName}">
                                            ${this.extractTeamOwnerName(value).initials}
                                        </a>
                                    `;
                                } else {
                                    return '';
                                }
                            }
                        },
                        {
                            name: 'leadMembers',
                            title: 'Members',
                            visible: true,
                            dataClass: 'td-users',
                            formatter: value => {
                                if (value) {
                                    const members = this.extractTeam(value, this.defaultTeamRoleId);
                                    let markup = '';
                                    members.forEach(m => {
                                        markup += `
                                            <a class="btn btn-outline-primary user-rectangle"
                                               href="#"
                                               title="${m.fullName}">
                                                ${m.initials}
                                            </a>
                                        `;
                                    });
                                    return markup;
                                } else {
                                    return '';
                                }
                            }
                        },
                        {
                            name: 'created',
                            title: 'Created date',
                            sortField: 'created',
                            visible: true,
                        },
                        {
                            name: 'deadLine',
                            title: 'Deadline',
                            sortField: 'deadLine',
                            visible: true,
                        }
                    ],
                    tableConfig: {
                        currentPage: 0,
                        pageSize: 20,
                        rowCount: 0,
                        sortCol: [
                            {
                                field: 'name',
                                sortField: 'name',
                                direction: 'asc'
                            }
                        ]
                    },
                    tableKey: 0,
                    tableActions: {
                        single: {
                            "details": { name: 'Details', icon: "details" },
                            "edit": { name: 'Edit', icon: "edit" },
                            "deactivate": { name: "Deactivate", icon: "eye-off" },
                            "moveToStage": { name: "Move to stage", icon: "move" },
                            "updateStatus": { name: "Change state", icon: "repeat" },
                            "setTeam": { name: "Set members", icon: "user-plus" },
                           //"generateDoc": { name: "Generate document", icon: "file-plus" },
                            "addTask": { name: 'Add task', icon: "list" }
                        },
                        singleDisabled: {
                            "activate": { name: "Activate", icon: "eye" },
                            "delete": { name: 'Delete', icon: "delete" }
                        },
                        multiple: {
                            "deactivate": { name: "Deactivate", icon: "eye-off" },
                            "merge": { name: "Merge" }
                        },
                        multipleDisabled: {
                            "activate": { name: "Activate", icon: "eye" },
                            "delete": { name: 'Delete', icon: "delete" }
                        }
                    },
                    pageRequestFilters: [
                        {
                            Propriety: "Owner",
                            Value: currentUserId,
						}
                    ],
                    noGoState: { Propriety: "LeadStateId", Value: "981bd00a-ecaf-4d1f-b691-925f855aef16" },
                    showFilters: false,
                    //Page config
                    listView: false,
                    //Lead modal
                    leadValues: {
                        name: null,
                        organizationId: null,
                        pipeLineId: pipeLineObj.id,
                        stageId: null,
                        leadStateId: null,
                        value: null,
                        currencyCode: null,
                        created: moment().format(taskDateFormat).toString(),
                        deadLine: moment().add(5, 'd').format(taskDateFormat).toString(),
                        members: [],
                        owner: null,
                        productType: null
                    },
                    newContactValues: {},
                    isAddByStage: false,
                    currentStage: '',
                    editableLeadModal: false,
                    waitAddButton: false,
                    continueAddModal: false,
                    selectedLeadId: '',
                    noGoStateModal: {},
                    noGoStates: [],
                    //Stage modal
                    waitStageAddButton: false,
                    //Status modal
                    waitStatusAddButton: false,
                    //Team modal
                    waitTeamAddButton: false,
                    //Task modal
                    taskValues: {},
                    waitTaskAddButton: false,
                    //Default role id
                    defaultOwnerRoleId: '11447a80-eff9-4f68-b24f-353ab2d5ee92',
                    defaultTeamRoleId: 'c92e023d-6804-43e8-88a8-ec807427d850',
                    //Generate document modal
                    sameOrgAgreementId: null,
                    waitAddButtonDocument: false,
                    documentValues: {},
                    documentLeadsSelect: [],
                    organisationAddressesSelect: [],
                    organisationContactsSelect: [],
                    //Other
                    contactsListSelect: [],
                    //productTypesListSelect: [],
                    leadStatesSelect: [],
                    productsListSelect: [],
                    //users: [],
                    leads: [],
                    regions: [],
                    cities: [],
                    orgValues: {},
                    orgAddress: {},
                    refreshInputs: 0,
                    productType: null,
                    searchString: '',
                    dataLoaded: false,
                    phoneList: [
                        {
                            phone: '',
                            countryCode: 'MD',
                            dialCode: '373',
                            label: ''
                        },
                        {
                            phone: '',
                            countryCode: 'MD',
                            dialCode: '373',
                            label: ''
                        },
                        {
                            phone: '',
                            countryCode: 'MD',
                            dialCode: '373',
                            label: ''
                        }],
                    labels: [],
					hideEmailInputs: ['', 'hide-field', 'hide-field', 'hide-field', 'hide-field'],
					emailList: [
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
					],
					emailLabels: [],
                    contactEmailList: [
                        {
                            email: '',
                            label: ''
                        },
                        {
                            email: '',
                            label: ''
                        },
                        {
                            email: '',
                            label: ''
                        },
                        {
                            email: '',
                            label: ''
                        },
                        {
                            email: '',
                            label: ''
                        },
                    ],
                    hidePhoneInputs: ['', 'hide-field', 'hide-field'],
                    contactHideEmailInputs: ['', 'hide-field', 'hide-field', 'hide-field', 'hide-field'],
					hideInput: {},
					currentHiddenPhoneIndex: 1,
					currentHiddenEmailIndex: 1,
                };
            },
            computed: {
                getControllerName() {
                    return "/PipeLine/PipeLineLeads/" + "@Model.Name".replace(' ', '_');
				},
				pipelinesListSelect() {
					return this.$store.state.allPipelinesForSelect;
				},
                pipelineStagesListSelect() {
					return utils.convertToSelectList(this.stages);
				},
                organizationsListSelect() {
                    return this.$store.state.allOrganizationsForSelect;
                },
                usersListSelect() {
                    return this.$store.state.allUsers;
                },
                membersUsers() {
                    return [...this.usersListSelect];
                },
                currenciesListSelect() {
                    return this.$store.state.allCurrencies;
                },
                contractTemplatesSelect() {
                    return this.$store.state.allContracts;
                },
                productsSelect() {
                    return this.$store.state.allProducts;
                },
                allAgreements() {
                    return this.$store.state.allAgreements;
                },
                countries() {
                    return this.$store.state.allCountries;
                },
                employeesSelect() {
                    return this.$store.state.allEmployees.map(e => {
                        const newObj = {
                            label: e.interval,
                            value: e.id,
                        }
                        return newObj;
                    });
                },
                @*getOrganizationsSelectors() {
                    return this.$store.state.selectorsForOrganization;
                },*@
                sourceTypesListSelect() {
                    return this.$store.state.allSources;
                },
                technologyTypesListSelect() {
                    return this.$store.state.allTechnologyTypes;
                },
                solutionTypesListSelect() {
                    return this.$store.state.allSolutionTypes;
                },
                listIndustry() {
                    let listOfIndustries = [];
                    listOfIndustries = this.$store.state.selectorsForOrganization.listIndustry?.map(e => {
                        const newObj = {
                            label: e.text,
                            value: e.value,
                        }
                        return newObj;
					});
					return listOfIndustries && listOfIndustries.length ? listOfIndustries : [];
                },
                pageOptionsComponents() {
                    return [
                        {
                            name: 'Button',
                            props: {
                                label: '',
                                btnType: this.listView ? 'primary' : 'outline-primary',
                                className: 'ml-auto' + (this.listView ? ' list-btn active' : ' list-btn'),
                                onClick: () => {
                                    this.tableKey++;
                                    this.listView = true;
                                }
                            }
                        },
                        {
                            name: 'Button',
                            props: {
                                label: '',
                                btnType: this.listView ? 'outline-primary' : 'primary',
                                className: this.listView ? 'grid-btn' : 'grid-btn active',
                                onClick: () => {
                                    this.listView = false;
                                }
                            }
                        },
                        {
                            name: 'Button',
                            props: {
                                label: 'Add lead',
                                btnType: 'success',
                                className: 'ml-3',
                                onClick: () => {
									window.location.href = '/PipeLine/CreateLead?pipeLine=' + pipeLineObj.name.split(' ').join('_') + '&pipeLineId=' + pipeLineObj.id;
                                    @*this.organisationContactsSelect = [];
                                    this.resetLeadModalValues();
                                    this.editableLeadModal = false;
                                    this.isAddByStage = false;
                                    this.modalLeadKey++;
                                    this.refreshInputs++;
                                    $(`#${this.modalLeadProps.id}`).modal("show");*@

                                }
                            }
                        },
                        {
                            name: 'Button',
                            props: {
                                label: 'Import',
                                className: 'ml-2',
                                btnType: 'primary',
                                onClick: () => {
                                    this.resetImportLeadModal();
                                    $(`#${this.modalImportLead.id}`).modal("show");
                                }
                            }
                        }
                    ]
                },
                modalLeadMerge() {
                    return {
                        id: 'mergeLeadsModal',
                        label: 'Merge Leads',
                        formInputs: [
                            {
                                name: 'Select',
                                props: {
                                    id: 'merge-SelectedLeads',
                                    label: 'Lead Master',
                                    required: true,
                                    disabled: false,
                                    options: this.convertLeadsToSelectList(this.mergeOrgModal.mergeSelectLeads),
                                    value: this.mergeOrgModal.mergeSelectSourceLead,
                                    multiple: false,
                                    className: 'col-12'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'merge-SelectedOrganizations',
                                    label: 'Organization',
                                    required: false,
                                    disabled: false,
                                    options: this.convertToSelectList(this.mergeOrgModal.mergeSelectOrganizations),
                                    value: this.mergeOrgModal.mergeSelectSourceOrganization,
                                    multiple: false,
                                    className: 'col-12'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'merge-SelectedContacts',
                                    label: 'Contacts',
                                    required: false,
                                    disabled: false,
                                    options: this.convertContactsToSelectList(this.mergeOrgModal.mergeSelectContacts),
                                    value: this.mergeOrgModal.mergeSelectSourceContact,
                                    multiple: false,
                                    className: 'col-6'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'merge-SelectLeadState',
                                    label: 'Lead State',
                                    required: false,
                                    disabled: false,
                                    options: this.convertToSelectList(this.mergeOrgModal.mergeSelectLeadStates),
                                    value: this.mergeOrgModal.mergeSelectSourceLeadStates,
                                    multiple: false,
                                    className: 'col-6'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'merge-SelectProduct',
                                    label: 'Product',
                                    required: false,
                                    disabled: false,
                                    options: this.convertToSelectList(this.mergeOrgModal.mergeSelectProducts),
                                    value: this.mergeOrgModal.mergeSelectSourceProduct,
                                    multiple: false,
                                    className: 'col-6'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'merge-SelectServiceType',
                                    label: 'Service Type',
                                    required: false,
                                    disabled: false,
                                    options: this.convertToSelectList(this.mergeOrgModal.mergeSelectServiceTypes),
                                    value: this.mergeOrgModal.mergeSelectSourceServiceType,
                                    multiple: false,
                                    className: 'col-6'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'merge-SelectSolutionType',
                                    label: 'Solution Type',
                                    required: false,
                                    disabled: false,
                                    options: this.convertToSelectList(this.mergeOrgModal.mergeSelectSolutionTypes),
                                    value: this.mergeOrgModal.mergeSelectSourceSolutionType,
                                    multiple: false,
                                    className: 'col-6'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'merge-SelectSource',
                                    label: 'Source',
                                    required: false,
                                    disabled: false,
                                    options: this.convertToSelectList(this.mergeOrgModal.mergeSelectSources),
                                    value: this.mergeOrgModal.mergeSelectSourceSource,
                                    multiple: false,
                                    className: 'col-6'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'merge-SelectLeadMembers',
                                    label: 'Lead Members',
                                    required: false,
                                    disabled: false,
                                    options: this.convertLeadMembersToSelectList(this.mergeOrgModal.mergeSelectLeadMembers),
                                    value: this.mergeOrgModal.mergeSelectSourceLeadMembers,
                                    multiple: true,
                                    className: 'col-6'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'merge-SelectOwners',
                                    label: 'Owners',
                                    required: false,
                                    disabled: false,
                                    options: this.convertLeadMembersToSelectList(this.mergeOrgModal.mergeSelectOwners),
                                    value: this.mergeOrgModal.mergeSelectSourceOwners,
                                    multiple: false,
                                    className: 'col-6'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'merge-SelectTeam',
                                    label: 'Team',
                                    required: false,
                                    disabled: false,
                                    options: this.convertToSelectList(this.mergeOrgModal.mergeSelectTeams),
                                    value: this.mergeOrgModal.mergeSelectSourceTeam,
                                    multiple: false,
                                    className: 'col-6'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'merge-SelectTechnologyType',
                                    label: 'Technology',
                                    required: false,
                                    disabled: false,
                                    options: this.convertToSelectList(this.mergeOrgModal.mergeSelectTechnologyTypes),
                                    value: this.mergeOrgModal.mergeSelectSourceTechnologyType,
                                    multiple: false,
                                    className: 'col-6'
                                }
                            }
                        ],
                        formSubmits: [
                            {
                                name: 'Button',
                                props: {
                                    label: 'Merge',
                                    btnType: 'success',
                                    btnDOMType: 'submit'
                                }
                            }
                        ],
                        onSubmit: () => {
                            $(`#${this.modalLeadMerge.id}`).modal("hide");
                            this.mergeLeadsPost();
                        }
                    }
                },
                modalImportLead() {
                    return {
                        id: 'importLeads',
                        label: 'Import Leads',
                        formInputs: [
                            {
                                name: 'Select',
                                props: {
                                    id: 'import-Properties',
                                    label: 'Properties',
                                    required: true,
                                    multiple: true,
                                    disabled: false,
                                    options: this.convertToSelectList(this.importLeadModal.importProperties),
                                    value: this.importLeadModal.sourceImportProperties,
                                    className: 'col-12'
                                }
                            },
                            {
                                name: 'ShortTextBlock',
                                props: {
                                    value: 'Choose file type',
                                    className: 'col-3 ml-2'
                                }
                            },
                            {
                                name: 'Radio',
                                props: {
                                    id: 'import-fileType',
                                    label: 'Choose file type:',
                                    required: true,
                                    className: 'row ml-1',
                                    options: [{ value: 'XLS', label: 'Excel' }, { value: 'CSV', label: 'Spreadsheets' }]
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'import-Delimiter',
                                    label: 'Delimiter',
                                    required: !this.importLeadModal.importHideSelects,
                                    disabled: this.importLeadModal.importHideSelects,
                                    options: this.convertToSelectList(this.importLeadModal.importDelimiter),
                                    value: this.importLeadModal.sourceImportDelimiter,
                                    className: 'col-6 mt-2'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'import-Encoding',
                                    label: 'Encoding',
                                    required: !this.importLeadModal.importHideSelects,
                                    disabled: this.importLeadModal.importHideSelects,
                                    options: this.convertToSelectList(this.importLeadModal.importEncoding),
                                    value: this.importLeadModal.sourceImportEncoding,
                                    className: 'col-6 mt-2'
                                }
                            },
                            {
                                name: 'File',
                                props: {
                                    id: 'import-File',
                                    className: 'col-6 mt-1',
                                    label: 'Upload File',
                                    disabled: false,
                                    required: true,
                                    acceptedExtensions: this.importLeadModal.fileExtension
                                }
                            },
                            {
                                name: 'ShortTextBlock',
                                props: {
                                    value: 'Wrong extension!!!',
                                    className: 'col-5 ml-1 mt-2 text-danger',
                                    hidden: this.importLeadModal.checkExtension
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'import-MachingParameter',
                                    label: 'Matching parameter',
                                    required: true,
                                    multiple: true,
                                    disabled: false,
                                    options: this.convertToSelectList(this.importLeadModal.importParameter),
                                    value: this.importLeadModal.sourceImportParameter,
                                    className: 'col-12 mt-3'
                                }
                            },
                            {
                                name: 'ShortTextBlock',
                                props: {
                                    value: 'Actions',
                                    className: 'col-3 ml-1'
                                }
                            },
                            {
                                name: 'CheckBox',
                                props: {
                                    id: 'import-Action',
                                    label: 'Choose file type:',
                                    required: this.importLeadModal.action,
                                    className: 'col-12 ml-1',
                                    options: [{ value: 'Delete', label: 'Delete all existing records before import' },
                                    { value: 'Update', label: 'Update existing record (Only ADD missing information)' },
                                    { value: 'No maching', label: 'If no matching record is found. Create new record' },
                                    { value: 'More than one', label: 'If more than one records are found. Create a new record' }]
                                }
                            }
                        ],
                        formSubmits: [
                            {
                                name: 'Button',
                                props: {
                                    label: 'Import',
                                    btnType: 'success',
                                    disabled: !this.importLeadModal.checkState,
                                    btnDOMType: 'submit'
                                }
                            }
                        ],
                        onSubmit: async () => {
                            $(`#${this.modalImportLead.id}`).modal("hide");
                            this.importLeadPost();
                        }
                    }
                },
                modalFormSubmits() {
                    const resultArray = [
                        {
                            name: 'Button',
                            props: {
                                label: '@Localizer["cancel"]',
                                btnType: 'outline-secondary',
                                waiting: this.waitAddButton,
                                onClick: () => {
                                    $(`#${this.modalLeadProps.id}`).modal("hide");
                                }
                            }
                        }
                    ];
                    if (!this.editableLeadModal) {
                        resultArray.push(
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["add"]',
                                    btnType: 'success',
                                    btnDOMType: 'submit',
                                    waiting: this.waitAddButton,
                                    onMouseDown: () => {
                                        this.continueAddModal = false;
                                    }
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: 'Add & new',
                                    waiting: this.waitAddButton,
                                    btnType: 'success',
                                    btnDOMType: 'submit',
                                    onMouseDown: async () => {
                                        this.continueAddModal = true;
                                    }
                                }
                            }
                        );
                    } else {
                        resultArray.push(
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["save"]',
                                    btnType: 'success',
                                    btnDOMType: 'submit',
                                    onMouseDown: () => {
                                        this.continueAddModal = false;
                                    }
                                }
                            }
                        );
                    }
                    return resultArray;
                },
                modalLeadProps() {
                    return {
                        id: 'addLead',
                        modalSize: 'lg',
                        label: this.editableLeadModal ? 'Edit lead' : 'Add lead',
                        formInputs: [
                            {
                                name: 'Input',
                                props: {
                                    id: 'lead-name',
                                    type: 'text',
                                    label: 'Name',
                                    required: true,
                                    className: 'col-12',
                                    value: this.leadValues.name,
                                    validator: value => fieldValidationFunc(value, 'varChar300'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'varChar300')
                                }
                            },
                            {
                                name: 'Datepicker',
                                props: {
                                    id: 'lead-created',
                                    label: 'Start Date',
                                    className: 'col-12 col-md-6',
                                    format: taskDatePickerFormat,
                                    value: this.leadValues.created
                                }
                            },
                            {
                                name: 'Datepicker',
                                props: {
                                    id: 'lead-deadLine',
                                    label: 'End Date',
                                    required: true,
                                    className: 'col-12 col-md-6',
                                    format: taskDatePickerFormat,
                                    value: this.leadValues.deadLine
                                }
                            },
                            {
                                name: 'Datepicker',
                                props: {
                                    id: 'lead-clarificationDeadline',
                                    label: 'Clarification deadline',
                                    required: true,
                                    className: 'col-12',
                                    format: taskDatePickerFormat,
                                    value: this.leadValues.clarificationDeadline
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'lead-organizationId',
                                    label: 'Organization',
                                    required: true,
                                    size: 10,
                                    searchable: true,
                                    options: this.organizationsListSelect,
                                    className: 'col-12 col-md-5',
                                    value: this.leadValues.organizationId
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: '<span>&#43;<span/>',
                                    className: "wrapper",
                                    wrapper: "div",
                                    wrapperClass: "col-1",
                                    btnType: 'outline-secondary',
                                    onClick: () => {
                                        $(`#${this.modalLeadProps.id}`).modal("hide");
                                        this.addOrganization();

                                    }
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'lead-contactId',
                                    label: 'Contact',
                                    options: this.organisationContactsSelect,
                                    noneSelectedText: this.organisationContactsSelect.length > 0 ? 'Nothing selected' : 'Plese select organization with contacts',
                                    className: 'col-11 col-md-5',
                                    size: 10,
                                    searchable: true,
                                    value: this.leadValues.contactId
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: '<span>&#43;<span/>',
                                    className: "wrapper",
                                    wrapper: "div",
                                    wrapperClass: "col-1",
                                    btnType: 'outline-secondary',
                                    onClick: () => {
                                        $(`#${this.modalLeadProps.id}`).modal("hide");
                                        this.addContact(this.leadValues.organizationId);

                                    }
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'lead-pipeLineId',
                                    label: 'PipeLine',
                                    required: true,
                                    disabled: true,
									options: this.pipelinesListSelect,
                                    className: 'col-12',
                                    value: this.leadValues.pipeLineId
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'lead-stageId',
									label: 'Stage',
                                    required: true,
                                    disabled: this.isAddByStage,
                                    options: this.pipelineStagesListSelect,
                                    className: 'col-12 col-md-6',
                                    value: this.leadValues.stageId
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'lead-leadStateId',
                                    label: 'State',
                                    options: this.leadStatesSelect,
                                    className: 'col-12 col-md-6',
                                    value: this.leadValues.leadStateId
                                }
                            },
                            {
                                name: 'hr',
                                props: {
                                    class: 'line-between-inputs'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'lead-productType',
                                    label: 'Type of Product(Product/Service)',
                                    options: [
                                        {
                                            label: 'Product',
                                            value: 0,
                                        },
                                        {
                                            label: 'Service',
                                            value: 1
                                        },
                                    ],
                                    className: 'col-12 col-md-6',
                                    value: this.leadValues.productType
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'lead-productId',
                                    label: 'Product',
                                    noneSelectedText: this.productsListSelect.length > 0 ? 'Nothing selected' : 'Plese select a product type first',
                                    options: this.productsListSelect,
                                    className: 'col-12 col-md-6',
                                    value: this.leadValues.productId
                                }
                            },

                            {
                                name: 'Select',
                                props: {
                                    id: 'lead-serviceTypeId',
                                    label: 'Service type',
									options: this.convertArrayToSelectList(this.serviceTypesListSelect, 'name', 'id'),
                                    className: 'col-12 col-md-6',
                                    value: this.leadValues.serviceTypeId
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'lead-solutionTypeId',
                                    label: 'Solution type',
                                    options: this.solutionTypesListSelect,
                                    className: 'col-12 col-md-6',
                                    value: this.leadValues.solutionTypeId
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'lead-sourceId',
                                    label: 'Source type',
                                    options: this.sourceTypesListSelect,
                                    className: 'col-12 col-md-6',
                                    value: this.leadValues.sourceId
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'lead-technologyTypeId',
                                    label: 'Technology type',
                                    options: this.technologyTypesListSelect,
                                    className: 'col-12 col-md-6',
                                    value: this.leadValues.technologyTypeId
                                }
                            },
                            {
                                name: 'hr',
                                props: {
                                    class: 'line-between-inputs'
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'lead-value',
                                    label: 'Value',
                                    type: 'text',
                                    className: 'col-12 col-md-6',
                                    value: this.leadValues.value,
                                    validator: value => fieldValidationFunc(value, 'decimal'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'decimal')
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'lead-currencyCode',
                                    label: 'Currency',
                                    options: this.currenciesListSelect,
                                    disabled: true,
                                    size: 10,
                                    searchable: true,
                                    className: 'col-12 col-md-6',
                                    value: this.editableLeadModal ? this.leadValues.currencyCode : "EUR"
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'lead-owner',
                                    label: 'Owner',
                                    required: true,
                                    options: this.usersListSelect,
                                    value: this.leadValues.owner,
                                    className: 'col-12'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'lead-members',
                                    label: 'Members',
                                    multiple: true,
                                    searchable: true,
                                    options: this.membersUsers,
                                    value: this.leadValues.members,
                                    className: 'col-12'
                                }
                            },
                            {
                                name: 'Textarea',
                                props: {
                                    id: 'lead-description',
                                    label: 'Description',
                                    value: this.leadValues.description,
                                    className: 'col-12'
                                }
                            }
                        ],
                        formSubmits: this.modalFormSubmits,
                        onSubmit: () => {
                            if (this.validateValue(this.leadValues.value)) {
                                if (!this.editableLeadModal) {
                                    this.addNewLead().then(() => {
                                        if (this.continueAddModal) {
                                            this.resetLeadModalValues();
                                        } else {
                                            $(`#${this.modalLeadProps.id}`).modal("hide");
                                        }
                                    });
                                } else {
                                    this.updateLead().then(() => {
                                        $(`#${this.modalLeadProps.id}`).modal("hide");
                                    });
                                }
                            }
                            else {
                                toast.notifyErrorList('Make sure your input lead value is right');
                            }
                        }
                    }
                },
                modalStageLead() {
                    return {
                        id: 'stageLead',
                        modalSize: 'sm',
                        label: 'Change lead stage',
                        formInputs: [
                            {
                                name: 'Select',
                                props: {
                                    id: 'stageUpdate-stageId',
                                    label: 'Please select stage:',
                                    required: true,
                                    options: this.pipelineStagesListSelect,
                                    className: 'col-12',
                                    value: this.leadValues.stageId
                                }
                            },
							{
								name: 'Select',
								props: {
									id: 'stageUpdate-leadStateId',
									label: 'Please select state:',
                                    className: 'col-12 ' + this.displayStates,
									options: this.leadStatesSelect,
									value: this.leadValues.leadStateId
								}
							},
                        ],
                        formSubmits: [
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["cancel"]',
                                    btnType: 'outline-secondary',
                                    waiting: this.waitStageAddButton,
                                    onClick: () => {
                                        $(`#${this.modalStageLead.id}`).modal("hide");
                                    }
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["save"]',
                                    waiting: this.waitStageAddButton,
                                    btnType: 'success',
                                    btnDOMType: 'submit'
                                }
                            }
                        ],
                        onSubmit: () => {
                            this.updateLeadStage().then(() => {
                                $(`#${this.modalStageLead.id}`).modal("hide");
                            });
                        }
                    }
                },
                modalStateLead() {
                    return {
                        id: 'statusLead',
                        modalSize: 'sm',
                        label: 'Change lead state',
                        formInputs: [
                            {
                                name: 'Select',
                                props: {
                                    id: 'leadStateId',
                                    label: 'Lead state',
                                    required: true,
                                    options: this.leadStatesSelect,
                                    className: 'col-12',
                                    value: this.leadValues.leadStateId
                                }
                            }
                        ],
                        formSubmits: [
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["cancel"]',
                                    btnType: 'outline-secondary',
                                    waiting: this.waitStatusAddButton,
                                    onClick: () => {
                                        $(`#${this.modalStateLead.id}`).modal("hide");
                                    }
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["save"]',
                                    btnType: 'success',
                                    waiting: this.waitStatusAddButton,
                                    btnDOMType: 'submit'
                                }
                            }
                        ],
                        onSubmit: () => {
                            this.updateLeadState().then(() => {
                                $(`#${this.modalStateLead.id}`).modal("hide");
                            });
                        }
                    }
                },
                modalNoGoState() {
                    return {
                        id: 'noGoStateModal',
                        label: 'AddNoGoState',
                        formInputs: [
                            {
                                name: 'Select',
                                props: {
                                    id: 'entity-noGoState',
                                    label: 'NoGoStates',
                                    required: true,
                                    options: this.noGoStates,
                                    className: 'col-12',
                                    value: this.noGoStateModal.noGoStateId
                                }
                            }
                        ],
                        formSubmits: [
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["cancel"]',
                                    btnType: 'outline-secondary',
                                    waiting: this.waitTeamAddButton,
                                    onClick: () => {
                                        $(`#${this.modalNoGoState.id}`).modal("hide");
                                        $(`#${this.modalStateLead.id}`).modal("show");
                                    }
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["save"]',
                                    btnType: 'success',
                                    waiting: this.waitTeamAddButton,
                                    btnDOMType: 'submit'
                                }
                            }
                        ],
                        onSubmit: () => {
                            this.addLeadToNoGoState();
                        }
                    }
                },
                modalDocument() {
                    return {
                        id: 'documentModal',
                        label: 'Generate document',
                        formInputs: [
                            {
                                name: 'Input',
                                props: {
                                    id: 'agreement-name',
                                    type: 'text',
                                    label: 'Name',
                                    required: true,
                                    className: 'col-12',
                                    value: this.documentValues.name,
                                    validator: value => fieldValidationFunc(value, 'varChar128'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'varChar128')
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'agreement-contractTemplateId',
                                    label: 'Template Contract',
                                    required: true,
                                    options: this.contractTemplatesSelect,
                                    className: 'col-12',
                                    value: this.documentValues.contractTemplateId
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'agreement-organizationId',
                                    label: 'Organization',
                                    required: true,
                                    disabled: true,
                                    options: this.organizationsListSelect,
                                    size: 10,
                                    searchable: true,
                                    className: 'col-12',
                                    value: this.documentValues.organizationId
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'agreement-leadId',
                                    label: 'Lead',
                                    required: true,
                                    disabled: true,
                                    size: 10,
                                    searchable: true,
                                    options: this.documentLeadsSelect,
                                    className: 'col-12',
                                    value: this.documentValues.leadId
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'agreement-organizationAddressId',
                                    label: 'Organization Address',
                                    required: true,
                                    options: this.organisationAddressesSelect,
                                    size: 10,
                                    searchable: true,
                                    className: 'col-12',
                                    value: this.documentValues.organizationAddressId
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'agreement-contactId',
                                    label: 'Contact',
                                    required: true,
                                    size: 10,
                                    searchable: true,
                                    options: this.organisationContactsSelect,
                                    className: 'col-12 col-md-6',
                                    value: this.documentValues.contactId
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'agreement-commission',
                                    label: 'Commission',
                                    type: 'text',
                                    required: true,
                                    inputSuffix: '%',
                                    className: 'col-12 col-md-6',
                                    value: this.documentValues.commission
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'agreement-userId',
                                    label: 'Responsible',
                                    required: true,
                                    size: 10,
                                    searchable: true,
                                    options: this.usersListSelect,
                                    className: 'col-12 col-md-6',
                                    value: this.documentValues.userId
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'agreement-productId',
                                    label: 'Product',
                                    required: true,
                                    size: 10,
                                    searchable: true,
                                    options: this.productsSelect,
                                    className: 'col-12 col-md-6',
                                    value: this.documentValues.productId
                                }
                            },
                            {
                                name: 'Textarea',
                                props: {
                                    id: 'agreement-description',
                                    label: 'Description',
                                    required: true,
                                    value: this.documentValues.description,
                                    className: 'col-12'
                                }
                            }
                        ],
                        formSubmits: [
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["cancel"]',
                                    btnType: 'outline-secondary',
                                    onClick: () => {
                                        $(`#${this.modalDocument.id}`).modal("hide");
                                    }
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: 'Generate',
                                    btnType: 'success',
                                    waiting: this.waitAddButtonDocument,
                                    btnDOMType: 'submit'
                                }
                            }
                        ],
                        onSubmit: () => {
							if (this.allAgreements.length) {
								this.checkForDuplicateAndAdd().then(id => {
									this.documentValues.id = id;
									this.modalsameOrgKey++;
									$(`#${this.modalDocument.id}`).modal("hide");
									$(`#${this.modalsameOrgAgreements.id}`).modal("show");
								}).catch(() => {
									this.addNewDocument().then(() => {
										$(`#${this.modalDocument.id}`).modal("hide");
									});
								});
							}
                        }
                    }
                },
                modalsameOrgAgreements() {
                    return {
                        id: 'orgAgreementsModal',
                        label: 'Attention!',
                        formInputs: [
                            {
                                name: 'TextBlock',
                                props: {
                                    value: `Contract for this Organization already exists. Do you want to overwrite it?`
                                }
                            }
                        ],
                        formSubmits: [
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["system_taskmanager_yes"]',
                                    btnType: 'warning',
                                    onClick: () => {
                                        this.documentValues.id = this.sameOrgAgreementId;
                                        this.updateDocument().then(() => {
                                            $(`#${this.modalsameOrgAgreements.id}`).modal("hide");
                                        });
                                    }
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["cancel"]',
                                    btnType: 'outline-secondary',
                                    onClick: () => {
                                        this.modalDocumentKey++;
                                        $(`#${this.modalsameOrgAgreements.id}`).modal("hide");
                                        $(`#${this.modalDocument.id}`).modal("show");
                                    }
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: 'Save as new',
                                    btnType: 'success',
                                    onClick: () => {
                                        this.addNewDocument().then(() => {
                                            $(`#${this.modalsameOrgAgreements.id}`).modal("hide");
                                        });
                                    }
                                }
                            },
                        ]
                    }
                },
                modalTeamLead() {
                    return {
                        id: 'leadTeam',
                        label: 'Set lead members',
                        formInputs: [
                            {
                                name: 'Select',
                                props: {
                                    id: 'owner',
                                    label: 'Owner',
                                    required: true,
                                    options: this.usersListSelect,
                                    value: this.leadValues.owner,
                                    className: 'col-12'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'members',
                                    label: 'Members',
                                    multiple: true,
                                    searchable: true,
                                    options: this.membersUsers,
                                    value: this.leadValues.members,
                                    className: 'col-12'
                                }
                            },
                        ],
                        formSubmits: [
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["cancel"]',
                                    btnType: 'outline-secondary',
                                    waiting: this.waitTeamAddButton,
                                    onClick: () => {
                                        $(`#${this.modalTeamLead.id}`).modal("hide");
                                    }
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["save"]',
                                    btnType: 'success',
                                    waiting: this.waitTeamAddButton,
                                    btnDOMType: 'submit'
                                }
                            }
                        ],
                        onSubmit: () => {
                            this.setLeadOwner(this.leadValues.owner, this.leadValues.id, this.leadValues.members).then(() => {
                                $(`#${this.modalTeamLead.id}`).modal("hide");
                            });
                        }
                    }
                },
                modalTaskProps() {
                    return {
                        id: 'taskModal',
                        label: 'Add task to lead',
                        formInputs: [
                            {
                                name: 'Input',
                                props: {
                                    id: 'task-name',
                                    type: 'text',
                                    label: 'Name',
                                    required: true,
                                    value: this.taskValues.name,
                                    className: 'col-12',
                                    validator: value => fieldValidationFunc(value, 'name'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'name')
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'task-leadId',
                                    label: 'Lead',
                                    options: [{
                                        label: this.leadValues.name,
                                        value: this.leadValues.id
                                    }],
                                    value: this.leadValues.id,
                                    disabled: true,
                                    className: 'col-12'
                                }
                            },
                            {
                                name: 'Datepicker',
                                props: {
                                    id: 'task-startDate',
                                    label: 'Start date',
                                    required: true,
                                    format: taskDatePickerFormat,
                                    value: this.taskValues.startDate,
                                    className: 'col-12 col-md-6'
                                }
                            },
                            {
                                name: 'Datepicker',
                                props: {
                                    id: 'task-endDate',
                                    label: 'End date ',
                                    required: true,
                                    format: taskDatePickerFormat,
                                    value: this.taskValues.endDate,
                                    className: 'col-12 col-md-6'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'task-status',
                                    label: 'Status',
									options: this.convertArrayToSelectList(this.taskStatuses, 'text', 'value', 'system_taskmanager_'),
                                    value: this.taskValues.status,
                                    className: 'col-12 col-md-6'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'task-taskPriority',
                                    label: 'Priority',
									options: this.convertArrayToSelectList(this.taskPriorities, 'text', 'value', 'system_taskmanager_'),
                                    value: this.taskValues.taskPriority,
                                    className: 'col-12 col-md-6'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'task-userTeam',
                                    label: 'Assignee',
                                    searchable: true,
                                    multiple: true,
									required: true,
                                    options: this.usersListSelect,
                                    value: this.taskValues.userTeam,
                                    className: 'col-12'
                                }
                            },
                            {
                                name: 'Textarea',
                                props: {
                                    id: 'task-description',
                                    label: 'Description',
                                    required: true,
                                    value: this.taskValues.description,
                                    className: 'col-12'
                                }
                            }
                        ],
                        formSubmits: [
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["cancel"]',
                                    btnType: 'outline-secondary',
                                    onClick: () => {
                                        $(`#${this.modalTaskProps.id}`).modal("hide");
                                    }
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["add"]',
                                    btnType: 'success',
                                    btnDOMType: 'submit',
                                    waiting: this.waitTaskAddButton
                                }
                            }
                        ],
                        onSubmit: () => {
                            this.addNewTask().then(() => {
                                $(`#${this.modalTaskProps.id}`).modal("hide");
                            });
                        }
                    }
                },
                modalOrgProps() {
                    return {
                        id: 'organizationModal',
                        modalSize: 'lg',
                        label: 'Add New Organizatoon',
                        formInputs: [
                            {
                                name: 'Input',
                                props: {
                                    id: 'company-name',
                                    type: 'text',
                                    label: 'Organization name',
                                    required: true,
                                    value: this.orgValues.name,
                                    className: 'col-12 col-md-6',
                                    validator: value => fieldValidationFunc(value, 'varChar128'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'varChar128')
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'company-fiscalCode',
                                    label: 'Fiscal Code',
                                    type: 'text',
                                    value: this.orgValues.fiscalCode,
                                    className: 'col-12 col-md-6',
                                    validator: value => fieldValidationFunc(value, 'fiscalCodeMd'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'fiscalCodeMd')
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'company-industryId',
                                    label: 'Industry',
                                    options: this.listIndustry,
                                    size: 10,
                                    searchable: true,
                                    value: this.orgValues.industryId,
                                    className: 'col-11 col-md-5 col-lg-4'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'company-employeeId',
                                    label: 'Nr. of employees',
                                    value: this.orgValues.employeeId,
                                    options: this.employeesSelect,
                                    className: 'col-12 col-md-6 col-lg-4'
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'company-vitCode',
                                    type: 'text',
                                    label: 'VAT code',
                                    value: this.orgValues.vitCode,
                                    className: 'col-12 col-md-6 col-lg-4',
                                    validator: value => fieldValidationFunc(value, 'varChar50'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'varChar50')
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'org-email1',
                                    type: 'email',
                                    label: 'Email',
                                    className: 'col-6',
                                    value: this.emailList[0].email,
                                    validator: value => fieldValidationFunc(value, 'email')
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'org_EmailLabel1',
                                    label: 'Label',
                                    noneSelectedText: 'Select label',
									options: this.emailLabelsFromStore,
                                    value: this.emailList[0].label,
                                    className: 'col-6'
                                }
                            },
                            {
                                name: 'AddHideInput',
                                props: {
                                    id: 'HideEmailInput1',
                                    className: 'col-12 ' + this.getOrgHideEmailList[0],
                                    hideDelete: true,
                                    hidePlus: this.getOrgHideEmailList[1] == '' ? true : false,
                                    hideLabel: false,
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'org-email2',
                                    type: 'email',
                                    label: 'Email',
                                    className: 'col-6 ' + this.getOrgHideEmailList[1],
                                    value: this.emailList[1].email,
                                    validator: value => fieldValidationFunc(value, 'email')
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'org_EmailLabel2',
                                    label: 'Label',
                                    noneSelectedText: 'Select label',
									options: this.emailLabelsFromStore,
                                    value: this.emailList[1].label,
                                    className: 'col-6 ' + this.getOrgHideEmailList[1]
                                }
                            },
                            {
                                name: 'AddHideInput',
                                props: {
                                    id: 'HideEmailInput2',
                                    className: 'col-12 ' + this.getOrgHideEmailList[1],
                                    hidePlus: this.getOrgHideEmailList[2] == '' ? true : false,
                                    hideLabel: false,
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'org-email3',
                                    type: 'email',
                                    label: 'Email',
                                    className: 'col-6 ' + this.getOrgHideEmailList[2],
                                    value: this.emailList[2].email,
                                    validator: value => fieldValidationFunc(value, 'email')
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'org_EmailLabel3',
                                    label: 'Label',
                                    noneSelectedText: 'Select label',
									options: this.emailLabelsFromStore,
                                    value: this.emailList[2].label,
                                    className: 'col-6 ' + this.getOrgHideEmailList[2]
                                }
                            },
                            {
                                name: 'AddHideInput',
                                props: {
                                    id: 'HideEmailInput3',
                                    className: 'col-12 ' + this.getOrgHideEmailList[2],
                                    hidePlus: this.getOrgHideEmailList[3] == '' ? true : false,
                                    hideLabel: false,
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'org-email4',
                                    type: 'email',
                                    label: 'Email',
                                    className: 'col-6 ' + this.getOrgHideEmailList[3],
                                    value: this.emailList[3].email,
                                    validator: value => fieldValidationFunc(value, 'email')
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'org_EmailLabel4',
                                    label: 'Label',
                                    noneSelectedText: 'Select label',
									options: this.emailLabelsFromStore,
                                    value: this.emailList[3].label,
                                    className: 'col-6 ' + this.getOrgHideEmailList[3]
                                }
                            },
                            {
                                name: 'AddHideInput',
                                props: {
                                    id: 'HideEmailInput4',
                                    className: 'col-12 ' + this.getOrgHideEmailList[3],
                                    hidePlus: this.getOrgHideEmailList[4] == '' ? true : false,
                                    hideLabel: false,
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'org-email5',
                                    type: 'email',
                                    label: 'Email',
                                    className: 'col-6 ' + this.getOrgHideEmailList[4],
                                    value: this.emailList[4].email,
                                    validator: value => fieldValidationFunc(value, 'email')
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'org_EmailLabel5',
                                    label: 'Label',
                                    noneSelectedText: 'Select label',
									options: this.emailLabelsFromStore,
                                    value: this.emailList[4].label,
                                    className: 'col-6 ' + this.getOrgHideEmailList[4]
                                }
                            },
                            {
                                name: 'AddHideInput',
                                props: {
                                    id: 'HideEmailInput5',
                                    className: 'col-12 ' + this.getOrgHideEmailList[4],
                                    hidePlus: true,
                                    hideLabel: false,

                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'company-phone',
                                    label: 'Phone',
                                    type: 'tel',
                                    inputPrefix: '(+373)',
                                    value: this.orgValues.phone,
                                    className: 'col-12 col-md-6 col-lg-4',
                                    validator: value => fieldValidationFunc(value, 'phone'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'phone')
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'responsible-phone',
                                    type: 'text',
                                    label: 'Responsible',
                                    required: false,
                                    value: this.orgValues.ResponsibleForPhoneNumber,
                                    className: 'col-12 col-md-6 col-lg-4',
                                    validator: value => fieldValidationFunc(value, 'varChar128'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'varChar128')
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'company-webSite',
                                    label: 'Web site',
                                    type: 'text',
                                    value: this.orgValues.webSite,
                                    className: 'col-12 col-md-6 col-lg-4',
                                    validator: value => fieldValidationFunc(value, 'varChar50'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'varChar50')
                                }
                            },
                            {
                                name: 'Yearpicker',
                                props: {
                                    id: 'company-dateOfFounding',
                                    label: 'Year of Founding',
                                    required: false,
                                    className: 'col-12 col-md-6 col-lg-4',
                                    value: this.orgValues.dateOfFounding
                                }
                            },
                            {
                                name: 'hr',
                                props: {
                                    class: 'line-between-inputs'
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'company-bank',
                                    label: 'Bank',
                                    type: 'text',
                                    value: this.orgValues.bank,
                                    className: 'col-12 col-md-6 col-lg-4',
                                    validator: value => fieldValidationFunc(value, 'varChar500'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'varChar500')
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'company-iBANCode',
                                    label: 'IBAN Code',
                                    type: 'text',
                                    value: this.orgValues.iBANCode,
                                    className: 'col-12 col-md-6 col-lg-4',
                                    validator: value => fieldValidationFunc(value, 'varChar128'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'varChar128')
                                }
                            },

                            {
                                name: 'Input',
                                props: {
                                    id: 'company-codSwift',
                                    type: 'text',
                                    label: 'Swift code',
                                    value: this.orgValues.codSwift,
                                    className: 'col-12 col-md-6 col-lg-4',
                                    validator: value => fieldValidationFunc(value, 'varChar50'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'varChar50')
                                }
                            },
                            {
                                name: 'hr',
                                props: {
                                    class: 'line-between-inputs'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'company-clientType',
                                    label: 'Type of Organization',
                                    value: this.orgValues.clientType,
                                    required: true,
                                    options: [
                                        {
                                            label: 'Prospect',
                                            value: 0,
                                        },
                                        {
                                            label: 'Client',
                                            value: 1
                                        },
                                        {
                                            label: 'Lead',
                                            value: 2
                                        },
                                    ],
                                    className: 'col-12 col-md-6'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'company-isDeleted',
                                    label: 'Status',
                                    required: true,
                                    disabled: true,
                                    value: this.orgValues.isDeleted,
                                    options: [
                                        {
                                            label: 'Active',
                                            value: 'false',
                                        },
                                        {
                                            label: 'Inactive',
                                            value: 'true'
                                        }
                                    ],
                                    className: 'col-12 col-md-6'
                                }
                            },
                            {
                                name: 'hr',
                                props: {
                                    class: 'line-between-inputs'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'addressC-countryId',
                                    label: 'Country',
                                    size: 10,
                                    required: true,
                                    searchable: true,
                                    options: this.countries,
                                    value: this.orgAddress.countryId,
                                    className: 'col-12 col-md-6 col-lg-3'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'addressC-regionId',
                                    label: 'Region',
                                    size: 10,
                                    required: true,
                                    noneSelectedText: 'Select country first',
                                    searchable: true,
                                    options: this.regions,
                                    value: this.orgAddress.regionId,
                                    className: 'col-12 col-md-6 col-lg-3'
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'addressC-cityId',
                                    label: 'City',
                                    noneSelectedText: 'Select region first',
                                    options: this.cities,
                                    required: true,
                                    size: 10,
                                    searchable: true,
                                    value: this.orgAddress.cityId,
                                    className: 'col-12 col-md-6 col-lg-3'
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'addressC-street',
                                    label: 'Street',
                                    type: 'text',
                                    value: this.orgAddress.street,
                                    className: 'col-12 col-md-6 col-lg-3',
                                    validator: value => fieldValidationFunc(value, 'varChar128'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'varChar128')
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'addressC-zip',
                                    label: 'ZIP',
                                    type: 'text',
                                    value: this.orgAddress.zip,
                                    className: 'col-12 col-md-6 col-lg-3',
                                    validator: value => fieldValidationFunc(value, 'zip'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'zip')
                                }
                            },
                            {
                                name: 'hr',
                                props: {
                                    class: 'line-between-inputs'
                                }
                            },
                            {
                                name: 'Textarea',
                                props: {
                                    id: 'company-description',
                                    label: 'Description',
                                    value: this.orgValues.description,
                                    className: 'col-12'
                                }
                            }
                        ],
                        formSubmits: [
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["cancel"]',
                                    btnType: 'outline-secondary',
                                    onClick: () => {
                                        $(`#${this.modalOrgProps.id}`).modal("hide");
                                        $(`#${this.modalLeadProps.id}`).modal("show");
                                    }
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: 'Save and add contacts',
                                    btnType: 'success',
                                    btnDOMType: 'submit'
                                }
                            }
                        ],
                        onSubmit: () => {
                            if (this.orgValues.dateOfFounding) {
                                this.orgValues.dateOfFounding = moment(this.orgValues.dateOfFounding).format("YYYY/MM/DD");
                            };
                            this.resetContactModalValues();
                            this.addNewOrganization().then(() => {
                                this.addOrganizationAddress(this.newOrgId).then(() => {
                                    this.modalContactKey++;
                                    $(`#${this.modalOrgProps.id}`).modal("hide");
                                    this.addContact(this.newOrgId);
                                });
                            });
                        }
                    }
                },
                modalContactProps() {
                    return {
                        id: 'contactModal',
                        label: '@Localizer["contacts_add_contact"]',
                        formInputs: [
                            {
                                name: 'Input',
                                props: {
                                    id: 'contact-firstName',
                                    type: 'text',
                                    label: 'First Name',
                                    required: true,
                                    className: 'col-12 col-md-6',
                                    value: this.newContactValues.firstName,
                                    validator: value => fieldValidationFunc(value, 'nameLetters'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'nameLetters')
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'contact-lastName',
                                    type: 'text',
                                    label: 'Last Name',
                                    required: true,
                                    className: 'col-12 col-md-6',
                                    value: this.newContactValues.lastName,
                                    validator: value => fieldValidationFunc(value, 'nameLetters'),
                                    validatorInput: value => fieldValidationInputFunc(value, 'nameLetters')
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'contact-organizationId',
                                    label: 'Organization',
                                    required: true,
                                    searchable: true,
                                    options: this.organizationsListSelect,
                                    value: this.newContactValues.organizationId,
                                    className: 'col-12'
                                }
                            },
                            {
                                name: 'Input',
                                props: {
                                    id: 'contact-email1',
                                    type: 'email',
                                    label: 'Email',
                                    required: true,
                                    className: 'col-6',
                                    value: this.contactEmailList[0].email,
                                    validator: value => fieldValidationFunc(value, 'email')
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'contact_EmailLabel1',
                                    label: 'Label',
                                    noneSelectedText: 'Select label',
									options: this.emailLabelsFromStore,
                                    value: this.contactEmailList[0].label,
                                    className: 'col-5'
                                }
							},
							{
								name: 'Button',
								props: {
									label: '&#43;',
									className: 'btn btn-outline-secondary btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: 'text-center',
									disabled: !this.getContactEmailList[4],
									onClick: () => this.emitValueContact({ value: '', id: `HideEmailInputContact${this.currentHiddenEmailIndex++}` })
								}
							},
                            {
                                name: 'Input',
                                props: {
                                    id: 'contact-email2',
                                    type: 'email',
                                    label: 'Email',
                                    className: 'col-6 ' + this.getContactEmailList[1],
                                    value: this.contactEmailList[1].email,
                                    validator: value => fieldValidationFunc(value, 'email')
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'contact_EmailLabel2',
                                    label: 'Label',
                                    noneSelectedText: 'Select label',
									options: this.emailLabelsFromStore,
                                    value: this.contactEmailList[1].label,
                                    className: 'col-5 ' + this.getContactEmailList[1]
                                }
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.getContactEmailList[1]}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideEmailInputContact${this.currentHiddenEmailIndex--}` })
								}
							},
                            {
                                name: 'Input',
                                props: {
                                    id: 'contact-email3',
                                    type: 'email',
                                    label: 'Email',
                                    className: 'col-6 ' + this.getContactEmailList[2],
                                    value: this.contactEmailList[2].email,
                                    validator: value => fieldValidationFunc(value, 'email')
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'contact_EmailLabel3',
                                    label: 'Label',
                                    noneSelectedText: 'Select label',
									options: this.emailLabelsFromStore,
                                    value: this.contactEmailList[2].label,
                                    className: 'col-5 ' + this.getContactEmailList[2]
                                }
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.getContactEmailList[2]}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideEmailInputContact${this.currentHiddenEmailIndex--}` })
								}
							},
                            {
                                name: 'Input',
                                props: {
                                    id: 'contact-email4',
                                    type: 'email',
                                    label: 'Email',
                                    className: 'col-6 ' + this.getContactEmailList[3],
                                    value: this.contactEmailList[3].email,
                                    validator: value => fieldValidationFunc(value, 'email')
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'contact_EmailLabel4',
                                    label: 'Label',
                                    noneSelectedText: 'Select label',
									options: this.emailLabelsFromStore,
                                    value: this.contactEmailList[3].label,
                                    className: 'col-5 ' + this.getContactEmailList[3]
                                }
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.getContactEmailList[3]}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideEmailInputContact${this.currentHiddenEmailIndex--}` })
								}
							},
                            {
                                name: 'Input',
                                props: {
                                    id: 'contact-email5',
                                    type: 'email',
                                    label: 'Email',
                                    className: 'col-6 ' + this.getContactEmailList[4],
                                    value: this.contactEmailList[4].email,
                                    validator: value => fieldValidationFunc(value, 'email')
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'contact_EmailLabel5',
                                    label: 'Label',
                                    noneSelectedText: 'Select label',
									options: this.emailLabelsFromStore,
                                    value: this.contactEmailList[4].label,
                                    className: 'col-5 ' + this.getContactEmailList[4]
                                }
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.getContactEmailList[4]}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideEmailInputContact${this.currentHiddenEmailIndex--}` })
								}
							},
                            {
                                name: 'PhoneInput',
                                props: {
                                    id: 'contact-Phone1',
                                    type: 'text',
                                    label: 'Phone',
                                    required: this.hideInput.class == '' ? true : false,
                                    className: 'col-6',
                                    disabled: this.hideInput.class == '' ? false : true,
                                    dialCode: this.phoneList[0].dialCode,
                                    defaultCountry: this.phoneList[0].countryCode,
                                    value: this.phoneList[0].phone,
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'contact_PhoneLabel1',
                                    label: 'Label',
                                    disabled: this.hideInput.class == '' ? false : true,
                                    noneSelectedText: 'Select label',
									options: this.phoneLabels,
                                    value: this.phoneList[0].label,
                                    className: 'col-5'
                                }
							},
							{
								name: 'Button',
								props: {
									label: '&#43;',
									className: 'btn btn-outline-secondary btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: 'text-center',
									disabled: Boolean(this.hideInput.class || this.hidePhoneInputs[0] || !this.hidePhoneInputs[2]),
									onClick: () => this.emitValueContact({ value: '', id: `HideInput${this.currentHiddenPhoneIndex++}` })
								}
							},
                            {
                                name: 'PhoneInput',
                                props: {
                                    id: 'contact-Phone2',
                                    type: 'text',
                                    label: 'Phone',
                                    className: 'col-6 ' + this.hidePhoneInputs[1] + ' ' + this.hideInput.class,
                                    dialCode: this.phoneList[1].dialCode,
                                    defaultCountry: this.phoneList[1].countryCode,
                                    value: this.phoneList[1].phone,
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'contact_PhoneLabel2',
                                    label: 'Label',
                                    noneSelectedText: 'Select label',
									options: this.phoneLabels,
                                    value: this.phoneList[1].label,
                                    className: 'col-5 ' + this.hidePhoneInputs[1] + ' ' + this.hideInput.class
                                }
                            },
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.hidePhoneInputs[1]} ${this.hideInput.class}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideInput${this.currentHiddenPhoneIndex--}` })
								}
							},
                            {
                                name: 'PhoneInput',
                                props: {
                                    id: 'contact-Phone3',
                                    type: 'text',
                                    label: 'Phone',
                                    className: 'col-6 ' + this.hidePhoneInputs[2] + ' ' + this.hideInput.class,
                                    dialCode: this.phoneList[2].dialCode,
                                    defaultCountry: this.phoneList[2].countryCode,
                                    value: this.phoneList[2].phone,
                                }
                            },
                            {
                                name: 'Select',
                                props: {
                                    id: 'contact_PhoneLabel3',
                                    label: 'Label',
                                    noneSelectedText: 'Select label',
									options: this.phoneLabels,
                                    value: this.phoneList[2].label,
                                    className: 'col-5 ' + this.hidePhoneInputs[2] + ' ' + this.hideInput.class
                                }
							},
							{
								name: 'Button',
								props: {
									label: '-',
									className: 'btn btn-outline-danger btn-rounded mx-auto',
									wrapper: 'Div',
									wrapperClass: `text-center ${this.hidePhoneInputs[2]} ${this.hideInput.class}`,
									onClick: () => this.emitValueContact({ value: 'hide-field', id: `HideInput${this.currentHiddenPhoneIndex--}` })
								}
							},
							{
								name: 'Switcher',
								props: {
									id: 'N/ALabel',
									value: this.newContactValues.notAvailable,
									wrapper: 'Div',
									wrapperClass: 'col-12 d-flex align-items-center mb-3',
									label: 'N/A'
								}
							},
                            {
                                name: 'Select',
                                props: {
                                    id: 'contact-jobPositionId',
                                    label: 'Job Position',
                                    options: this.jobPositionsListSelect,
                                    value: this.newContactValues.jobPositionId,
                                    className: 'col-12'
                                }
                            },
                            {
                                name: 'Textarea',
                                props: {
                                    id: 'contact-description',
                                    label: 'Description',
                                    className: 'col-12',
                                    value: this.newContactValues.description,
                                }
                            }
                        ],
                        formSubmits: [
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["cancel"]',
                                    btnType: 'outline-secondary',
                                    onClick: () => {
                                        $(`#${this.modalContactProps.id}`).modal("hide");
                                        $(`#${this.modalLeadProps.id}`).modal("show");
                                    }
                                }
                            },
                            {
                                name: 'Button',
                                props: {
                                    label: '@Localizer["save"]',
                                    btnType: 'success',
                                    waiting: this.waitAddButton,
                                    btnDOMType: 'submit'
                                }
                            }
                        ],
                        onSubmit: () => {
                            this.newContactValues.phoneList = this.newContactValues.phoneList.map(e => e.value);
                            if (this.newContactValues.phone)
                                this.newContactValues.phoneList.push(this.newContactValues.phone);
                            this.addNewContact().then(() => {
                                $(`#${this.modalContactProps.id}`).modal("hide");
                                this.leadValues.organizationId = this.newContactValues.organizationId
                                this.loadOrganizationContacts(this.newContactValues.organizationId);
                                this.resetContactModalValues();
                                this.refreshInputs++;
                                $(`#${this.modalLeadProps.id}`).modal("show");
                            });
                        }
                    }
                },
                customQueryparams() {
                    const params = {
                        pipelineId: pipeLineObj.id,
                        gSearch: this.searchString,
                        includeDeleted: true
                    };
                    this.pageRequestFilters.forEach((a, i) => {
                        for (pv in a) {
                            params[`pageRequestFilters[${i}][${pv}]`] = a[pv];
                        }
                    });
                    return params;
                },
                usersListFilter() {
                    let newArray = [];
					this.users.forEach(e => {
                        let newElem = Object.assign({}, e);
						if (e.value == currentUserId)
							newElem.active = true;
						else
                        newElem.active = false;
                        newArray.push(newElem);
                    });
                    return newArray;
                },
                leadStagesFilter() {
                    let newArray = [];
                    this.pipelineStagesListSelect.forEach(e => {
                        let newElem = Object.assign({}, e);
                        newElem.active = false;
                        newArray.push(newElem);
                    });
                    return newArray;
                },
                leadStatesFilter() {
                    let newArray = [];
                    this.leadStatesSelect.forEach(e => {
                        let newElem = Object.assign({}, e);
                        newElem.active = false;
                        newArray.push(newElem);
                    });
                    return newArray;
                },
                tableFilters() {
                    if (this.listView) {
                        return [
                            {
                                id: 'Owner',
                                label: 'Owner',
                                values: this.usersListFilter
                            },
                            {
                                id: 'LeadStateId',
                                label: 'State',
                                values: this.leadStatesFilter
                            },
                            {
                                id: 'StageId',
                                label: 'Stage',
                                values: this.leadStagesFilter
                            }
                        ]
                    } else {
                        return null;
                    }
                },
                gridFilters() {
					if (!this.listView) {
						return [
							{
								placeholder: 'Owner',
								optionList: this.users,
                                type: 'select',
                                name: 'OwnerId',
                                multiple: true,
                                searchable: true,
                                actionsBox: true
							},
							{
								placeholder: 'Organization',
								optionList: this.organizationsListSelect,
                                type: 'select',
                                name: 'OrganizationId',
								multiple: true,
								searchable: true,
								actionsBox: true
							},
							{
								placeholder: 'Start Date',
                                type: 'input',
                                name: 'StartDate'
							},
							{
								placeholder: 'End Date',
                                type: 'input',
                                name: 'DueDate'
							},
						]
                    }
                    return null;
                },
                getOrgHideEmailList() {
                    return this.hideEmailInputs;
                },
                getContactEmailList() {
                    return this.contactHideEmailInputs;
                },
                emailLabelsFromStore() {
                    return this.$store.state.allEmailLabels;
                },
                phoneLabels() {
                    return this.$store.state.allPhoneLabels;
                },
                serviceTypesListSelect() {
                    return this.$store.state.allServiceTypes;
                },
                taskStatuses() {
                    return this.$store.state.allTaskStatusList;
                },
                taskPriorities() {
                    return this.$store.state.allTaskPriorityList;
                }
            },
            created() {
                this.$store.dispatch('getAllUsers');
                this.$store.dispatch('getAllOrganizationsForSelect');
				this.$store.dispatch('getAllLeads');
                this.resetTaskValues();
                this.resetDocumentValues();

                const promises = [
                    customAjaxRequest(apiEndpoints.PipeLines.GetPipeLineStages, 'get', { pipeLineId: this.pipelineId }),
                    customAjaxRequest(apiEndpoints.Leads.GetAllLeadStates),
					customAjaxRequest(apiEndpoints.Users.GetUsers),
                ];
                Promise.all(promises).then(result => {
                    this.stages = result[0];
                    this.leadStatesSelect = this.convertToSelectList(result[1]);
					this.users = this.convertUsersToSelectList(result[2]);
                    this.noGoStates = [];
                    //this.noGoStates.push(...this.convertToSelectList(result[7]));
                    this.showFilters = true;
                    this.dataLoaded = true;
                });
            },
            methods: {
                async checkForDuplicateAndAdd() {
                    const orgId = this.documentValues.organizationId;
                    let sameOrgAgreements = this.allAgreements.filter(a => a.organizationId === orgId);
                    sameOrgAgreements = sameOrgAgreements.sort((x, y) => {
                        return moment(x.created, 'DD.MM.YYYY').isAfter(y.creted, 'DD.MM.YYYY') ? -1 : 1;
                    });
                    return new Promise((resolve, reject) => {
                        if (sameOrgAgreements.length > 0) {
                            this.sameOrgAgreementId = sameOrgAgreements[0].id;
                            resolve(true);
                        } else {
                            reject(false);
                        }
                    });
                },
				async deleteEmail(emailId) {
					customAjaxRequest(apiEndpoints.Email.DeleteEmailById, 'DELETE', { emailId }).then(() => {
						this.tableKey++;
					}).catch(e => {
						toast.notifyErrorList(e);
					});
                },
				async deletePhone(phoneId) {
					customAjaxRequest(apiEndpoints.Phone.DeletePhoneById, 'DELETE', { phoneId }).then(() => {
						this.tableKey++;
					}).catch(e => {
						toast.notifyErrorList(e);
					});
				},
				async addEmailList(ListToAdd) {
                    return new Promise((resolve, reject) => {
                        customAjaxRequest(apiEndpoints.Email.AddEmailRange, 'PUT', { model: ListToAdd }).then(() => {
                            this.tableKey++;
                            resolve(true);
                        }).catch(e => {
                            toast.notifyErrorList(e);
                            reject(false);
                        }).finally(() => {
                            this.waitAddButton = false;
                        });
                    });
                },
				async addPhoneList(ListToAdd) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Phone.AddPhoneRange, 'PUT', { model: ListToAdd }).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					})
				},
				async updateEmailList(ListToUpdate) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Email.UpdateRangeEmail, 'POST', { model: ListToUpdate }).then(() => {
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
				async addNewOrganization() {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Organization.AddNewOrganization, 'PUT', this.orgValues).then(result => {
                            this.newOrgId = result;
							let EmailListAdd = [];
							for (i = 0; i < 5; i++) {
								if (this.hideEmailInputs[i] == '') {
									EmailListAdd.push({
										email: this.emailList[i].email,
										label: this.emailList[i].label,
										organizationId: result
									});
								}
							}
							if (EmailListAdd.length > 0)
								this.addEmailList(EmailListAdd);
							this.tableKey++;
							resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					});
                },
				async addOrganizationAddress(orgId) {
					this.waitAddressButton = true;
					this.orgAddress.organizationId = orgId;
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationAddress.AddOrganizationAddress, 'PUT', this.orgAddress).then(result => {
							this.waitAddressButton = false;
							this.resetOrgAddressValues();
							resolve(true);
						}).catch(e => {
							this.waitAddressButton = false;
							toast.notifyErrorList(e);
							reject(false);
						});
					});
				},
                async addNewDocument() {
                    this.waitAddButtonDocument = true;
                    return new Promise((resolve, reject) => {
                        customAjaxRequest(apiEndpoints.Agreement.AddAgreement, 'PUT', this.documentValues).then(agreementId => {
                            window.open(`${window.location.origin}${apiEndpoints.Agreement.GenerateFileContractForAgreement}?agreementId=${agreementId}`, '_blank');
                            resolve(true);
                        }).catch(e => {
                            toast.notifyErrorList(e);
                            reject(false);
                        }).finally(() => {
                            this.waitAddButtonDocument = false;
                        });
                    });
                },
                async updateDocument() {
                    this.waitAddButtonDocument = true;
                    return new Promise((resolve, reject) => {
                        customAjaxRequest(apiEndpoints.Agreement.UpdateAgreement, 'POST', this.documentValues).then(() => {
                            window.open(`${window.location.origin}${apiEndpoints.Agreement.GenerateFileContractForAgreement}?agreementId=${this.documentValues.id}`, '_blank');
                            resolve(true);
                        }).catch(e => {
                            toast.notifyErrorList(e);
                            reject(false);
                        }).finally(() => {
                            this.waitAddButtonDocument = false;
                        });
                    });
                },
                resetImportLeadModal() {
                    this.importLeadModal.sourceImportProperties = [];
					this.importLeadModal.importParameter = [];
					this.importLeadModal.importHideSelects = true;
					this.importLeadModal.fileExtension = '';
					this.importLeadModal.sourceImportDelimiter = null;
					this.importLeadModal.sourceImportEncoding = null;
					this.importLeadModal.sourceImportAction = null;
                    this.importLeadModal.sourceImportParameter = [];
                    this.importLeadModal.action = true;
					this.importLeadModal.file = null;
					this.importLeadModal.checkExtension = false;
					this.importLeadModal.checkState = true;
					this.modalImportKey++;
				},
                async addNewTask() {
                    this.waitTaskAddButton = true;
                    return new Promise((resolve, reject) => {
                        customAjaxRequest(apiEndpoints.TaskManager.CreateTask, 'POST', this.taskValues).then(() => {
                            this.waitTaskAddButton = false;
                            resolve(true);
                        }).catch(e => {
                            this.waitTaskAddButton = false;
                            toast.notifyErrorList(e);
                            reject(false);
                        });
                    });
                },
                async addNewLead() {
                    this.waitAddButton = true;
                    for (prop in this.leadValues) {
                        if (this.leadValues[prop] === null) {
                            delete this.leadValues[prop];
                        }
                    }
                    return new Promise((resolve, reject) => {
                        customAjaxRequest(apiEndpoints.Leads.AddLead, 'PUT', this.leadValues).then(leadId => {
                            if (this.leadValues.owner) {
                                this.setLeadOwner(this.leadValues.owner, leadId, this.leadValues.members).then(() => {
                                    resolve(true);
                                    this.waitAddButton = false;
                                });
                            } else {
                                this.tableKey++;
                                resolve(true);
                                this.waitAddButton = false;
                            }
                        }).catch(e => {
                            toast.notifyErrorList(e);
                            reject(false);
                            this.waitAddButton = false;
                        });
                    });
                },
                async deactivateLeads(leads) {
                    leads.forEach((leadId, i, a) => {
                        customAjaxRequest(apiEndpoints.Leads.DisableLead, 'DELETE', { leadId }).then(() => {
                            if (i === a.length - 1) {
                                this.tableKey++;
                            }
                        }).catch(e => {
                            toast.notifyErrorList(e);
                        });
                    });
                },
                async deleteLeads(leads) {
                    leads.forEach((leadId, i, a) => {
                        customAjaxRequest(apiEndpoints.Leads.DeleteLead, 'DELETE', { leadId }).then(() => {
                            if (i === a.length - 1) {
                                this.tableKey++;
                            }
                        }).catch(e => {
                            toast.notifyErrorList(e);
                        });
                    });
                },
                async activateLeads(leads) {
                    leads.forEach((leadId, i, a) => {
                        customAjaxRequest(apiEndpoints.Leads.ActivateLead, 'DELETE', { leadId }).then(() => {
                            if (i === a.length - 1) {
                                this.tableKey++;
                            }
                        }).catch(e => {
                            toast.notifyErrorList(e);
                        });
                    });
                },
                async updateLead() {
                    this.waitAddButton = true;
                    return new Promise((resolve, reject) => {
                        customAjaxRequest(apiEndpoints.Leads.UpdateLead, 'POST', this.leadValues).then(() => {
                            if (this.leadValues.owner) {
                                this.setLeadOwner(this.leadValues.owner, this.leadValues.id, this.leadValues.members);
                            } else {
                                this.tableKey++;
                            }
                            resolve(true);
                            this.waitAddButton = false;
                        }).catch(e => {
                            toast.notifyErrorList(e);
                            reject(false);
                            this.waitAddButton = false;
                        });
                    });
                },
                addLeadToNoGoState() {
                    customAjaxRequest(apiEndpoints.Leads.AddLeadToNoGoState, 'POST', this.noGoStateModal).then(() => {
                        $(`#${this.modalNoGoState.id}`).modal("hide");
                        $(`#${this.modalStateLead.id}`).modal("show");
                    });
				},
                loadProducts(productType) {
                    productType == 0 ? this.loadAllProduct() : this.loadAllService();
                },
                loadAllProduct() {
					customAjaxRequest(apiEndpoints.Product.GetAllProductsOfTypeProduct, 'GET').then(result => {
						this.productsListSelect = this.convertToSelectList(result);
						this.modalLeadKey++;
					});
                },
				loadAllService() {
					customAjaxRequest(apiEndpoints.Product.GetAllProductsOfTypeService, 'GET').then(result => {
						this.productsListSelect = this.convertToSelectList(result);
						this.modalLeadKey++;
					});
				},
				async importLeadPost() {
					let properties = [];
					sourceImportProperties = this.importLeadModal.sourceImportProperties;
					sourceImportProperties.forEach(id => { if (id) properties.push(this.importLeadModal.importProperties.find(x => x.id === id).name) });

					let parameters = [];
					sourceImportParameter = this.importLeadModal.sourceImportParameter;
					sourceImportParameter.forEach(id => { if (id) parameters.push(this.importLeadModal.importProperties.find(x => x.id === id).name) });
					let delim = null;
					if (this.importLeadModal.fileExtension === '.csv') {
						this.importLeadModal.sourceImportDelimiter = this.importLeadModal.importDelimiter.find(x => x.id === this.importLeadModal.sourceImportDelimiter).name;
						this.importLeadModal.sourceImportEncoding = this.importLeadModal.importEncoding.find(x => x.id === this.importLeadModal.sourceImportEncoding).name;

						switch (this.importLeadModal.sourceImportDelimiter) {
							case 'Comma':
								delim = ',';
								break;
							case 'Semicolon':
								delim = ';';
								break;
							case 'Tabulation':
								delim = '	';
								break;
							default:
						}
					}

					const objToSendToAPI = {
						ImportFile: this.importLeadModal.file,
						Delimiter: delim,
						Action: this.importLeadModal.sourceImportAction,
						Encoding: this.importLeadModal.sourceImportEncoding,
						Parameters: parameters,
						Properties: properties,
						Type: 'Lead'
					};

					let form_data = new FormData();
					for (let key in objToSendToAPI) {
						form_data.append(key, objToSendToAPI[key]);
					}

					return new Promise((resolve, reject) => {
                        $.ajax({
                            url: apiEndpoints.Leads.ImportLeads,
							data: form_data,
							processData: false,
							contentType: false,
							type: "POST",
							success: (data) => {
								resolve(data);
								this.tableKey++;
							},
							error: (e) => {
								toast.notifyErrorList(e);
								reject(e);
							}
						});
					});
				},
                async updateLeadStage() {
                    this.waitStageAddButton = true;
                    const values = {
                        leadId: this.leadValues.id,
                        stageId: this.leadValues.stageId,
                        stateId: this.leadValues.leadStateId
                    }
                    return new Promise((resolve, reject) => {
                        customAjaxRequest(apiEndpoints.Leads.MoveLeadToStage, 'POST', values).then(() => {
                            this.tableKey++;
                            this.waitStageAddButton = false;
                            resolve(true);
                        }).catch(e => {
                            toast.notifyErrorList(e);
                            this.waitStageAddButton = false;
                            reject(false);
                        });
                    });
                },
                async updateLeadState() {
                    this.waitStatusAddButton = true;
                    const values = {
                        leadId: this.leadValues.id,
                        stateId: this.leadValues.leadStateId
                    }
                    return new Promise((resolve, reject) => {
                        customAjaxRequest(apiEndpoints.Leads.ChangeLeadState, 'POST', values).then(() => {
                            this.tableKey++;
                            this.waitStatusAddButton = false;
                            resolve(true);
                        }).catch(e => {
                            toast.notifyErrorList(e);
                            this.waitStatusAddButton = false;
                            reject(false);
                        });
                    });
                },
                async setLeadOwner(ownerId, leadId, listMembersId = []) {
                    return new Promise((resolve, reject) => {
                        customAjaxRequest(apiEndpoints.Leads.SetLeadMembers, 'POST', { ownerId, leadId, listMembersId }).then(() => {
                            this.tableKey++;
                            resolve(true);
                        }).catch(e => {
                            toast.notifyErrorList(e);
                            reject(false);
                        });
                    });
                },
                async loadLead(leadId) {
                    return new Promise((resolve, reject) => {
                        customAjaxRequest(apiEndpoints.Leads.GetLeadById, 'GET', { leadId }).then(lead => {
                            resolve(lead);
                        }).catch(e => {
                            toast.notifyErrorList(e);
                            reject(false);
                        });
                    });
                },
                loadOrganizationContacts(organizationId) {
                    customAjaxRequest(apiEndpoints.Contact.GetContactByOrganizationId, 'GET', { organizationId }).then(result => {
                        this.organisationContactsSelect = this.convertContactsToSelectList(result);
                            this.modalLeadKey++;
                    });
                },
                loadOrganizationAddresses(organizationId) {
                    customAjaxRequest(apiEndpoints.OrganizationAddress.GetAddressesByOrganizationId, 'GET', { organizationId }).then(result => {
                        this.organisationAddressesSelect = this.convertAdddressToSelectList(result);
                    });
                },
                async loadOrganizationAddressesAsync(organizationId) {
                    return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.OrganizationAddress.GetAddressesByOrganizationId, 'GET', { organizationId }).then(result => {
                            resolve(result);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					})
				},
                changeLeadStage(leadId) {
                    utils.setBodyProgressCursor();
                    this.loadLead(leadId).then(lead => {
                        this.leadValues = lead;
						this.displayStates = 'hide-field';
                        this.modalStageKey++;
                        $(`#${this.modalStageLead.id}`).modal("show");
                        utils.unsetBodyProgressCursor();
                    });
                },
                changeLeadState(leadId, stageId) {
                    this.selectedLeadId = leadId;
                    utils.setBodyProgressCursor();
                    this.loadLead(leadId).then(lead => {
                        this.leadValues = lead;
                        if (stageId)
                            this.loadStatesByStage(stageId);
                        else
                            this.loadAllStates();
                        this.modalStateKey++;
                        $(`#${this.modalStateLead.id}`).modal("show");
                        utils.unsetBodyProgressCursor();
                    });
                },
                resetModalNoGoState() {
                    this.noGoStateModal = {
                        leadId: this.selectedLeadId,
						noGoStateId: null
                    }
                },
                resetContactEmail(index) {
                    this.contactEmailList[index] = {
                        email: '',
                        label: ''
                    };
                    this.contactEmailList.push({
                        email: '',
                        label: ''
                    });
                    this.contactEmailList.pop();
				},
                resetOrgEmail(index) {
                    this.emailList[index] = {
                        email: '',
                        label: ''
                    };
                    this.emailList.push({
                        email: '',
                        label: ''
                    });
                    this.emailList.pop();
				},
				resetPhone(index) {
					this.phoneList[index] = {
						phone: '',
						countryCode: 'MD',
						dialCode: '373',
						label: '',
						contactId: ''
					};

					this.phoneList.push({
						phone: '',
						countryCode: 'MD',
						dialCode: '373',
						label: '',
						contactId: ''
					});
					this.phoneList.pop;
				},
                async addDocument(leadId) {
                    this.resetDocumentValues();
                    utils.setBodyProgressCursor();
                    this.loadLead(leadId).then(lead => {
                        this.documentValues.leadId = lead.id;
                        this.documentValues.organizationId = lead.organizationId;
                        this.documentLeadsSelect = [{
                            label: lead.name,
                            value: lead.id
                        }];
                        //this.loadOrganizationAddresses(lead.organizationId);

                        this.loadOrganizationContacts(lead.organizationId);
                        this.modalDocumentKey++;

                        utils.unsetBodyProgressCursor();

						this.loadOrganizationAddressesAsync(lead.organizationId).then(address => {
							this.organisationAddressesSelect = this.convertAdddressToSelectList(address);
							if (this.organisationAddressesSelect.length > 0) {
								$(`#${this.modalDocument.id}`).modal("show");
							}
							else {
								Swal.fire(
									'Warning!',
									`In orderd to be able to generate document for this lead add an address for organization ${lead.organizationName}`,
									'warning'
								).then(() => {
									$(`#${this.modalDocument.id}`).modal("show");
								});
							}
						});
                    });
                },
				async addNewContact() {
					this.waitAddButton = true;
                    return new Promise((resolve, reject) => {
                        customAjaxRequest(apiEndpoints.Contact.AddNewContact, 'PUT', this.newContactValues).then(() => {
							if (this.hideInput.class == '') {
								let addList = [];
								for (i = 0; i < 3; i++) {
									if (this.hidePhoneInputs[i] == '') {
										addList.push({
											phone: this.phoneList[i].phone,
											countryCode: this.phoneList[i].countryCode,
											dialCode: this.phoneList[i].dialCode,
											label: this.phoneList[i].label,
											contactId: result
										});
									}
								}

								this.addPhoneList(addList);
							}

							let EmailListAdd = [];
							for (i = 0; i < 5; i++) {
								if (this.contactHideEmailInputs[i] == '') {
									EmailListAdd.push({
										email: this.emailList[i].email,
										label: this.emailList[i].label,
										contactId: result
									});
								}
							}

							if (EmailListAdd.length > 0)
								this.addEmailList(EmailListAdd);
                            resolve(true);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						}).finally(() => {
							this.waitAddButton = false;
						});
					});
				},
                addTask(leadId) {
                    utils.setBodyProgressCursor();
                    this.loadLead(leadId).then(lead => {
                        this.leadValues = lead;
                        this.taskValues.leadId = lead.id;
                        this.modalTaskKey++;
                        $(`#${this.modalTaskProps.id}`).modal("show");
                        utils.unsetBodyProgressCursor();
                    });
                },
                changeLeadTeam(leadId) {
                    utils.setBodyProgressCursor();
                    this.loadLead(leadId).then(lead => {
                        this.leadValues = lead;
						if (lead.ownerId) {
							this.leadValues.owner = lead.ownerId;
							//utils.changeObjPropInArrayById(this.membersUsers, true, 'disabled', this.leadValues.owner, 'value');
						} else {
							const owners = this.extractTeamIds(this.leadValues.leadMembers, this.defaultOwnerRoleId);
							if (owners) {
								this.leadValues.owner = owners[0];
								//utils.changeObjPropInArrayById(this.membersUsers, true, 'disabled', owners[0], 'value');
							}
						}
                        this.leadValues.members = this.extractTeamIds(this.leadValues.leadMembers, this.defaultTeamRoleId);
                        this.modalTeamKey++;
                        $(`#${this.modalTeamLead.id}`).modal("show");
                        utils.unsetBodyProgressCursor();
                    });
                },
				async loadCountryRegions(countryId) {
					customAjaxRequest(apiEndpoints.OrganizationAddress.GetAllRegionsByCountryId, 'get', { countryId }).then(result => {
						this.regions = this.convertToSelectList(result);
					});
				},
				async loadRegionCities(regionId) {
					customAjaxRequest(apiEndpoints.OrganizationAddress.GetAllCitiesByRegionId, 'get', { regionId }).then(result => {
						this.cities = this.convertToSelectList(result);
					});
                },
                async loadStatesByStage(stageId) {
					return new Promise((resolve, reject) => {
						customAjaxRequest(apiEndpoints.Leads.GetAllLeadStatesByStage, 'GET', { stageId }).then(result => {
							resolve(result);
						}).catch(e => {
							toast.notifyErrorList(e);
							reject(false);
						});
					})
                },
				async loadAllStates() {
					customAjaxRequest(apiEndpoints.Leads.GetAllLeadStates, 'get' ).then(result => {
						this.leadStatesSelect = this.convertToSelectList(result);
					});
				},
				editLead(leadId, leadName) {
					window.location.href = '/PipeLine/Edit?lead=' + leadName + '&leadId=' + leadId;
                    @*utils.setBodyProgressCursor();
                    this.editableLeadModal = true;
                    this.resetLeadModalValues;
                    this.refreshInputs++;
                    this.loadLead(leadId).then(result => {
                        this.leadValues = result;

						if (String(this.leadValues.value).length > 1) {
                            this.leadValues.value = this.leadValues.value.toLocaleString();
                        };
                        const owners = this.extractTeamIds(this.leadValues.leadMembers, this.defaultOwnerRoleId);
                        if (owners) {
                            this.leadValues.owner = owners[0];
                            utils.changeObjPropInArrayById(this.membersUsers, true, 'disabled', owners[0], 'value');
                        }
                        this.leadValues.members = this.extractTeamIds(this.leadValues.leadMembers, this.defaultTeamRoleId);
                        this.leadValues.created = moment(this.leadValues.created, 'DD.MM.YYYY').format(taskDateFormat);
                        this.leadValues.deadLine = moment(this.leadValues.deadLine, 'DD.MM.YYYY').format(taskDateFormat);
                        this.leadValues.clarificationDeadline = moment(this.leadValues.clarificationDeadline, 'DD.MM.YYYY').format(taskDateFormat);
						this.loadOrganizationContacts(result.organizationId);
						if (result.product) {
							this.loadProducts(result.product.type);
						}
						customAjaxRequest(apiEndpoints.Organization.GetOrganizationById, 'GET', { organizationId: result.organizationId }).then(res => {
                            utils.unsetBodyProgressCursor();
                            this.modalLeadKey++;
                            $(`#${this.modalLeadProps.id}`).modal("show");
                        });
                        this.loadStatesByStage(this.leadValues.stageId).then(result => {
                            this.leadStatesSelect = this.convertToSelectList(result);
                        });
                        this.modalLeadKey++;
                    });*@
                },
                addContact(orgId) {
                    this.resetContactModalValues();
                    this.newContactValues.organizationId = orgId;
                    this.modalContactKey++;
					$(`#${this.modalContactProps.id}`).modal("show");
                },
				addOrganization() {
                    this.resetOrgModalValues();
                    this.resetOrgAddressValues();
					this.modalOrgKey++;
					$(`#${this.modalOrgProps.id}`).modal("show");
                },
                resetLeadModalValues() {
                    this.leadValues = {
                        name: '',
                        organizationId: null,
                        pipeLineId: pipeLineObj.id,
                        stageId: null,
                        leadStateId: null,
                        value: null,
                        currencyCode: null,
                        created: moment().format(taskDateFormat).toString(),
                        deadLine: moment().add(5, 'd').format(taskDateFormat).toString(),
                        members: [],
                        owner: null,
                        clarificationDeadline: moment().add(5, 'd').format(taskDateFormat).toString(),
                        contactId: null,
                        productTypeId: null,
                        productId: null,
                        serviceTypeId: null,
                        solutionTypeId: null,
                        sourceId: null,
                        technologyTypeId: null,
                        description: null
                    };
                    this.leadStatesSelect = [];
                    this.modalLeadKey++;
                },
                resetTaskValues() {
                    this.taskValues = {
                        name: '',
                        description: '',
                        startDate: moment().format(taskDateFormat).toString(),
                        endDate: moment().add(1, 'h').format(taskDateFormat).toString(),
                        userTeam: [],
                        taskPriority: '0',
                        leadId: null,
                        status: '0'
                    }
                },
                resetDocumentValues() {
                    this.documentValues = {
                        name: null,
                        leadId: null,
                        organizationId: null,
                        contactId: null,
                        organizationAddressId: null,
                        userId: null,
                        contractTemplateId: null,
                        commission: null,
                        productId: null
                    }
                },
				resetOrgModalValues() {
					this.orgValues = {
						name: null,
						ResponsibleForPhoneNumber: null,
						clientType: 0,
						bank: null,
						email: null,
						phone: null,
						webSite: null,
						fiscalCode: null,
						iBANCode: null,
						industryId: null,
						employeeId: null,
						description: null,
						vitCode: null,
						codSwift: null,
						dateOfFounding: null,
						isDeleted: false
                    }
					this.emailList = [
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
					];
					this.hideEmailInputs = ['', 'hide-field', 'hide-field', 'hide-field', 'hide-field'];
					this.refreshInputs++;
				},
				resetOrgAddressValues() {
					this.orgAddress = {
						countryId: null,
						organizationId: null,
						regionId: null,
						cityId: null,
						street: null,
						zip: null
					}
					this.refreshInputs++;
				},
				resetContactModalValues() {
					this.newContactValues = {
						organizationId: '',
						email: '',
						phone: '',
						requiredPhone: true,
						phoneList: [],
						firstName: '',
						lastName: '',
						description: '',
						jobPositionId: ''
                    },

						this.phoneList = [
							{
								phone: '',
								countryCode: 'MD',
								dialCode: '373',
								label: '',
								contactId: ''
							},
							{
								phone: '',
								countryCode: 'MD',
								dialCode: '373',
								label: '',
								contactId: ''
							},
							{
								phone: '',
								countryCode: 'MD',
								dialCode: '373',
								label: '',
								contactId: ''
							}
						];
					this.contactEmailList = [
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
						{
							email: '',
							label: ''
						},
					];
					this.contactHideEmailInputs = ['', 'hide-field', 'hide-field', 'hide-field', 'hide-field'];
					this.hidePhoneInputs = ['', 'hide-field', 'hide-field'];
					this.hideInput = {
						class: '',
						checked: false,
					};
					this.hidePhoneInputs = ['', 'hide-field', 'hide-field'];
					this.currentHiddenEmailIndex = 1;
					this.currentHiddenPhoneIndex = 1;
				},
                importLead(val) {
					if (val) {
						switch (val.id) {
							case 'import-Properties':
                                this.importLeadModal.sourceImportProperties = val.value;
								let parameters = [];
								val.value.forEach(id => { if (id) parameters.push(this.importLeadModal.importProperties.find(x => x.id === id)) });

								this.importLeadModal.importParameter = parameters;
								break;
							case 'import-fileType':
								if (val.value === 'CSV') {
									this.importLeadModal.importHideSelects = false;
									this.importLeadModal.fileExtension = '.csv';
									if (this.importLeadModal.file != null) {
										if (this.importLeadModal.file.name.includes('.xls')) {
											this.importLeadModal.checkExtension = true;
											this.importLeadModal.checkState = false;
										}
										else {
											this.importLeadModal.checkExtension = false;
											this.importLeadModal.checkState = true;
										}
									}

								} else {
									this.importLeadModal.importHideSelects = true;
									this.importLeadModal.fileExtension = '.xls;*.xlsx';
									if (this.importLeadModal.file != null) {
										if (this.importLeadModal.file.name.includes('.csv')) {
											this.importLeadModal.checkExtension = true;
											this.importLeadModal.checkState = false;
										}
										else {
											this.importLeadModal.checkExtension = false;
											this.importLeadModal.checkState = true;
										}
									}
								}
								break;
							case 'import-Delimiter':
								this.importLeadModal.sourceImportDelimiter = val.value;
								break;
							case 'import-Encoding':
								this.importLeadModal.sourceImportEncoding = val.value;
								break;
                            case 'import-Action':
                                if (val.value.length > 0) {
                                    this.importLeadModal.action = false;
                                }
                                else this.importLead.action = true;
								this.importLeadModal.sourceImportAction = val.value;
								break;
							case 'import-MachingParameter':
								this.importLeadModal.sourceImportParameter = val.value;
								break;
							default:
								if (val.name.includes(this.importLeadModal.fileExtension)) {
									this.importLeadModal.checkExtension = false;
									this.importLeadModal.checkState = true;
								}
								this.importLeadModal.file = val;
						}
					} else {
						this.importLeadModal.file = null;
						this.importLeadModal.checkExtension = false;
						this.importLeadModal.checkState = true;
					}
                },
                validateValue(value) {
                        var regex = /|(?=.*?\d)^\$?(([1-9]\d{0,2}(,\d{3})*)|\d+)?(\.\d{1,2})?$/;
                        return String(value).match(regex) ? true : false;
                },
                emitNoGoStateChanges(val) {
					this.noGoStateModal.noGoStateId = val.value;
				},
                emitValueLead(val) {
                    const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.leadValues[val.id.replace('lead-', '')] = newVal;

                    if (val.id == 'lead-owner') {
						this.membersUsers.map(m => {
                            m.disabled = false;
                            return m;
                        });
                        utils.changeObjPropInArrayById(this.membersUsers, true, 'disabled', newVal, 'value');
                        this.leadValues.members = this.leadValues.members.filter(m => {
                            return m != newVal;
                        });
                    }
                    if (val.id == 'lead-organizationId') {
                        this.loadOrganizationContacts(val.value);

                    }
                    if (val.id == 'lead-productType') {
						this.loadProducts(val.value);
                    }
                    if (val.id == 'lead-stageId') {
                        this.leadValues.leadStateId = null;
                        this.loadStatesByStage(val.value).then(result => {
							this.leadStatesSelect = this.convertToSelectList(result);
                        });
					}


                },
                emitValueLeadChanges(val) {
                    const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
                    this.leadValues[val.id] = newVal;
                    if (val.id == 'leadStateId' && val.value == '981bd00a-ecaf-4d1f-b691-925f855aef16') {
                        $(`#${this.modalStateLead.id}`).modal("hide");
                        this.resetModalNoGoState();
						$(`#${this.modalNoGoState.id}`).modal("show");
					}
                    if (val.id == 'owner') {
						this.membersUsers.map(m => {
                            m.disabled = false;
                            return m;
                        });
                        utils.changeObjPropInArrayById(this.membersUsers, true, 'disabled', newVal, 'value');
                        this.leadValues.members = this.leadValues.members.filter(m => {
                            return m != newVal;
                        });
                    }
                },
                emitValueStageUpdate(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					this.leadValues[val.id.replace('stageUpdate-', '')] = newVal;
                    if (val.id == 'stageUpdate-stageId') {
                        this.loadStatesByStage(val.value).then(result => {
							this.leadValues.leadStateId = null;
							this.displayStates = 'hide-field';
                            this.leadStatesSelect = this.convertToSelectList(result);
                            if (this.leadStatesSelect.length == 1) {
								this.leadValues.leadStateId = this.leadStatesSelect[0].value;
							}
							else if (this.leadStatesSelect.length > 1) {
								this.displayStates = '';
                            }
                        });

					}
				},
                emitModalDocumentValue(val) {
                    const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
                    this.documentValues[val.id.replace('agreement-', '')] = newVal;
                    if (val.id == 'agreement-organizationId') {
                        this.loadOrganizationAddresses(val.value);
                        this.loadOrganizationContacts(val.value);
                    }
                },
                emitValueTaskChanges(val) {
                    const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
                    this.taskValues[val.id.replace('task-', '')] = newVal;
                },
				emitValueOrg(val) {
					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
					if (val.id.includes('addressC')) {
						this.orgAddress[val.id.replace('addressC-', '')] = newVal;
						if (val.id === 'addressC-countryId') {
							this.loadCountryRegions(val.value);
							this.cities = [];
						}
						if (val.id === 'addressC-regionId') {
							this.loadRegionCities(val.value);
						}
					} else {
						this.orgValues[val.id.replace('company-', '')] = newVal;
                    }

					if (val.id.includes('HideEmailInput')) {
						let index = val.id[14] - '0';
						if (val.value == '') this.hideEmailInputs[index] = val.value;
						else {
							this.hideEmailInputs[index - 1] = val.value;
							if (val.value != '') {
								if (this.emailList[index - 1].id) {
									this.deleteEmail(this.emailList[index - 1].id);
								}
								this.resetOrgEmail(index - 1);
							}
						}
						this.hideEmailInputs.push(val.value);
						this.hideEmailInputs.pop();
					}
					if (val.id.includes('org-email')) {
						let index = val.id[9] - '0';
						this.emailList[index - 1].email = val.value;
					}
					if (val.id.includes('org_EmailLabel')) {
						let index = val.id[14] - '0';
						this.emailList[index - 1].label = val.value;
					};
				},
                emitValueContact(val) {
					if (val.id.includes('HideEmailInputContact')) {
						let index = val.id[21] - '0';
						if (val.value == '') this.contactHideEmailInputs[index] = val.value;
						else {
							this.contactHideEmailInputs[index - 1] = val.value;
							if (val.value != '') {
								if (this.contactEmailList[index - 1].id) {
									this.deleteEmail(this.contactEmailList[index - 1].id);
								}
								this.resetContactEmail(index - 1);
							}
						}
						this.contactHideEmailInputs.push(val.value);
						this.contactHideEmailInputs.pop();
					}
					if (val.id.includes('contact-email')) {
						let index = val.id[13] - '0';
						this.contactEmailList[index - 1].email = val.value;
					}
					if (val.id.includes('contact_EmailLabel')) {
						let index = val.id[18] - '0';
						this.contactEmailList[index - 1].label = val.value;
					}

					const newVal = val.value === 'true' ? true : val.value === 'false' ? false : val.value;
                    this.newContactValues[val.id.replace('contact-', '')] = newVal;

					if (val.id.includes('contact-Phone')) {
						let length = val.id.length;
						let index = (val.id[length - 1] - '0') - 1;
						this.phoneList[index].phone = val.value.number;
						this.phoneList[index].countryCode = val.value.countryCode;
						this.phoneList[index].dialCode = val.value.dialCode;
					}
					if (val.id.includes('contact_PhoneLabel')) {
						let length = val.id.length;
						let index = (val.id[length - 1] - '0') - 1;
						this.phoneList[index].label = val.value;
					}

					if (val.id.includes('HideInput')) {
						let index = val.id[9] - '0';
						if (val.value == '') this.hidePhoneInputs[index] = val.value;
						else {
							this.hidePhoneInputs[index - 1] = val.value;
							if (val.value != '') {
								if (this.phoneList[index - 1].id) {
									this.deletePhone(this.phonelist[index - 1].id);
								}
								this.resetPhone(index - 1);
							}
						}
						this.hidePhoneInputs.push(val.value);
						this.hidePhoneInputs.pop();
					}
					if (val.id == 'N/ALabel') {
						this.hideInput = val.value;
						this.newContactValues.notAvailable = val.value.checked;
						if (this.phoneList[0].id) {
							this.deletePhone(this.phoneList[0].id);
						}
						this.resetPhone(0);

					}
				},
                convertLeadsToSelectList(array) {
                    return array.map(e => {
                        const newObj = {
                            label: e.name + ' created on:' + e.created,
                            value: e.id
                        }
                        return newObj;
                    });
                },
                convertToSelectList(array) {

                    return array.length > 0 ? array.map(e => {
                        const newObj = {
                            label: e.name,
                            value: e.id
                        }
                        return newObj;
                    }) : [];
                },
                convertLeadMembersToSelectList(array) {
                    return array.length > 0 ? array.map(e => {
                        const newObj = {
                            label: e.firstName,
                            value: e.id
                        }
                        return newObj;
                    }) : [];
                },
                convertArrayToSelectList(array, textProp, valueProp, translatePrefix = null) {
                    return array.map(e => {
                        const text = e[textProp];
                        const newObj = {
                            label: translatePrefix ? window.translate(translatePrefix + text.toLowerCase()) : text,
                            disabled: false,
                            value: e[valueProp]
                        }
                        return newObj;
                    });
                },
                convertStatesToSelectList(array, textProp, valueProp, translatePrefix = null) {
					return array.map(e => {
						const text = e[textProp];
						const newObj = {
							label: text,//translatePrefix ? window.translate(translatePrefix + text) :
							disabled: false,
							value: e[valueProp]
						}
						return newObj;
					});
                },
                convertUsersToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e.userFirstName && e.userFirstName.trim() ? `${e.userFirstName} ${e.userLastName}` : e.userName,
							value: e.id
						}
						return newObj;
					});
				},
                convertCurrenciesToSelectList(array) {
                    return array.map(e => {
                        const newObj = {
                            label: `${e.name}(${e.symbol})`,
                            value: e.code
                        }
                        return newObj;
                    });
                },
                convertContactsToSelectList(array) {
                    return array.map(e => {
                        const newObj = {
                            label: `${e.firstName} ${e.lastName}`,
                            value: e.id
                        }
                        return newObj;
                    });
                },
                convertAdddressToSelectList(array) {
                    return array.map(e => {
                        const newObj = {
                            label: `r.${e.region?.name}, ${e.city?.name} ${e.street ? ', ' + e.street : ''}`,
                            value: e.id
                        }
                        return newObj;
                    });
                },
				convertPhoneToSelectList(array) {
					if (array) {
						return array.map(e => {
							const newObj = {
								label: e.value,
								value: e.value,
								disabled: true,
							}
							return newObj;
						});
					} else return [];
                },
				convertHelperToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e.text,
							value: e.value
						}
						return newObj;
					});
                },
				convertEmployeeToSelectList(array) {
					return array.map(e => {
						const newObj = {
							label: e.interval,
							value: e.id
						}
						return newObj;
					});
				},
                emitValueLeadMerge(val) {
                    if (val.id === 'merge-SelectedLeads') {
                        this.mergeOrgModal.mergeSelectSourceLead = val.value;
                        this.selectAllProperties(val.value);
                    }
                    if (val.id === 'merge-SelectLeadState') {
                        this.mergeOrgModal.mergeSelectSourceLeadStates = val.value;
                        return;
                    }
                    if (val.id === 'merge-SelectedOrganizations') {
                        this.mergeOrgModal.mergeSelectSourceOrganization = val.value;
                        return;
                    }

                    if (val.id === 'merge-SelectedContacts') {
                        this.mergeOrgModal.mergeSelectSourceContact = val.value;
                        return;
                    }
                    if (val.id === 'merge-SelectProduct') {
                        this.mergeOrgModal.mergeSelectSourceProduct = val.value;
                        return;
                    }
                    if (val.id === 'merge-SelectServiceType') {
                        this.mergeOrgModal.mergeSelectSourceServiceType = val.value;
                        return;
                    }
                    if (val.id === 'merge-SelectSolutionType') {
                        this.mergeOrgModal.mergeSelectSourceSolutionType = val.value;
                        return;
                    }
                    if (val.id === 'merge-SelectSource') {
                        this.mergeOrgModal.mergeSelectSourceSource = val.value;
                        return;
                    }
                    if (val.id === 'merge-SelectTeam') {
                        this.mergeOrgModal.mergeSelectSourceTeam = val.value;
                        return;
                    }
                    if (val.id === 'merge-SelectTechnologyType') {
                        this.mergeOrgModal.mergeSelectSourceTechnologyType = val.value;
                        return;
                    }
                    if (val.id === 'merge-SelectLeadMembers') {
                        this.mergeOrgModal.mergeSelectSourceLeadMembers = val.value;
                        return;
                    }
					if (val.id === 'merge-SelectOwners') {
						this.mergeOrgModal.mergeSelectSourceOwners = val.value;
						return;
					}
                },
                async selectAllProperties(leadId) {
                    this.mergeOrgModal.mergeSelectSourceOrganization = null;
                    this.mergeOrgModal.mergeSelectSourceContact = null;
                    this.mergeOrgModal.mergeSelectSourceProduct = null;
                    this.mergeOrgModal.mergeSelectSourceServiceType = null;
                    this.mergeOrgModal.mergeSelectSourceSolutionType = null;
                    this.mergeOrgModal.mergeSelectSourceSource = null;
                    this.mergeOrgModal.mergeSelectSourceTeam = null;
                    this.mergeOrgModal.mergeSelectSourceTechnologyType = null;
                    this.mergeOrgModal.mergeSelectSourceCountry = null;
                    this.mergeOrgModal.mergeSelectSourceLeadStates = null;
                    this.mergeOrgModal.mergeSelectSourceLeadMembers = [];

                    const selectedLead = this.mergeOrgModal.mergeMapper.find(e => e.leadId === leadId);
                    this.mergeOrgModal.mergeSelectOrganizations = this.removeDuplicates(this.mergeOrgModal.mergeSelectOrganizationsInitial.filter(item => item.id != selectedLead.organizationId));
                    this.mergeOrgModal.mergeSelectContacts = this.removeDuplicates(this.mergeOrgModal.mergeSelectContactsInitial.filter(item => item.id != selectedLead.contactId));
                    this.mergeOrgModal.mergeSelectLeadStates = this.removeDuplicates(this.mergeOrgModal.mergeSelectLeadStatesInitial.filter(item => item.id != selectedLead.leadStateId));
                    let leadMembers = this.mergeOrgModal.mergeSelectLeadMembersInitial;
                    selectedLead.leadMembers.forEach(memberId => { leadMembers = leadMembers.filter(item => item.id != memberId) });
                    this.mergeOrgModal.mergeSelectLeadMembers = this.removeDuplicates(leadMembers);

                    let Owners = this.mergeOrgModal.mergeSelectOwnersInitial;
                    selectedLead.owners.forEach(ownerId => { Owners = Owners.filter(item => item.id != ownerId) });
                    this.mergeOrgModal.mergeSelectOwners = this.removeDuplicates(Owners);

                    this.mergeOrgModal.mergeSelectProducts = this.removeDuplicates(this.mergeOrgModal.mergeSelectProductsInitial.filter(item => item.id != selectedLead.ProductId));
                    this.mergeOrgModal.mergeSelectServiceTypes = this.removeDuplicates(this.mergeOrgModal.mergeSelectServiceTypesInitial.filter(item => item.id != selectedLead.serviceTypeId));
                    this.mergeOrgModal.mergeSelectSolutionTypes = this.removeDuplicates(this.mergeOrgModal.mergeSelectSolutionTypesInitial.filter(item => item.id != selectedLead.solutionTypeId));
                    this.mergeOrgModal.mergeSelectSources = this.removeDuplicates(this.mergeOrgModal.mergeSelectSourcesInitial.filter(item => item.id != selectedLead.sourceId));
                    this.mergeOrgModal.mergeSelectTeams = this.removeDuplicates(this.mergeOrgModal.mergeSelectTeamsInitial.filter(item => item.id != selectedLead.teamId));
                    this.mergeOrgModal.mergeSelectTechnologyTypes = this.removeDuplicates(this.mergeOrgModal.mergeSelectTechnologyTypesInitial.filter(item => item.id != selectedLead.technologyTypeId));
                    this.mergeOrgModal.mergeRemainingLeads = this.mergeOrgModal.mergeSelectLeadsInitial.filter(item => item.id != leadId).map(x => x.id);
                },
                mergeLeadsPost() {
                    const objToSendToApi = {
                        "SourceLeadId": this.mergeOrgModal.mergeSelectSourceLead,
                        "OrganizationId": this.mergeOrgModal.mergeSelectSourceOrganization,
                        "ContactId": this.mergeOrgModal.mergeSelectSourceContact,
                        "LeadMembersIds": this.mergeOrgModal.mergeSelectSourceLeadMembers,
                        "OwnerId": this.mergeOrgModal.mergeSelectSourceOwners,
                        "LeadStateId": this.mergeOrgModal.mergeSelectSourceLeadStates ? this.mergeOrgModal.mergeSelectSourceLeadStates : null,
                        "ProductId": this.mergeOrgModal.mergeSelectSourceProduct,
                        "ServiceTypeId": this.mergeOrgModal.mergeSelectSourceServiceType,
                        "SolutionTypeId": this.mergeOrgModal.mergeSelectSourceSolutionType,
                        "SourceId": this.mergeOrgModal.mergeSelectSourceSource,
                        "TeamId": this.mergeOrgModal.mergeSelectSourceTeam,
                        "TechnologyTypeId": this.mergeOrgModal.mergeSelectSourceTechnologyType,
                        "RemainingLeadsIds": this.mergeOrgModal.mergeRemainingLeads
                    }
                    customAjaxRequest(apiEndpoints.Leads.MergeLeads, 'POST', JSON.stringify(objToSendToApi), true).then(() => {
                        this.tableKey++;
                    });
                },
                initializeMergeModal() {
                    this.mergeOrgModal.mergeSelectLeads = [];
                    this.mergeOrgModal.mergeSelectOrganizations = [];
                    this.mergeOrgModal.mergeSelectContacts = [];
                    this.mergeOrgModal.mergeSelectLeadStates = [];
                    this.mergeOrgModal.mergeSelectLeadMembers = [];
                    this.mergeOrgModal.mergeSelectOwners = [];
                    this.mergeOrgModal.mergeSelectProducts = [];
                    this.mergeOrgModal.mergeSelectServiceTypes = [];
                    this.mergeOrgModal.mergeSelectSolutionTypes = [];
                    this.mergeOrgModal.mergeSelectSources = [];
                    this.mergeOrgModal.mergeSelectTeams = [];

                    this.mergeOrgModal.mergeSelectLeadsInitial = [];
                    this.mergeOrgModal.mergeSelectOrganizationsInitial = [];
                    this.mergeOrgModal.mergeSelectContactsInitial = [];
                    this.mergeOrgModal.mergeSelectLeadStatesInitial = [];
                    this.mergeOrgModal.mergeSelectLeadMembersInitial = [];
                    this.mergeOrgModal.mergeSelectOwnersInitial = [];
                    this.mergeOrgModal.mergeSelectProductsInitial = [];
                    this.mergeOrgModal.mergeSelectServiceTypesInitial = [];
                    this.mergeOrgModal.mergeSelectSolutionTypesInitial = [];
                    this.mergeOrgModal.mergeSelectSourcesInitial = [];
                    this.mergeOrgModal.mergeSelectTeamsInitial = [];
					this.mergeOrgModal.mergeSelectTechnologyTypesInitial = [];

                    this.mergeOrgModal.mergeSelectTechnologyTypes = [];
                    this.mergeOrgModal.mergeSelectSourceLead = null;
                    this.mergeOrgModal.mergeSelectSourceOrganization = null;
                    this.mergeOrgModal.mergeSelectSourceContact = null;
                    this.mergeOrgModal.mergeSelectSourceLeadMembers = [];
                    this.mergeOrgModal.mergeSelectSourceOwners = null;
                    this.mergeOrgModal.mergeSelectSourceProduct = null;
                    this.mergeOrgModal.mergeSelectSourceLeadStates = [];
                    this.mergeOrgModal.mergeSelectSourceServiceType = null;
                    this.mergeOrgModal.mergeSelectSourceSolutionType = null;
                    this.mergeOrgModal.mergeSelectSourceSource = null;
                    this.mergeOrgModal.mergeSelectSourceTeam = null;
                    this.mergeOrgModal.mergeSelectSourceTechnologyType = null;
                    this.mergeOrgModal.mergeTargetLead = null;
                    this.mergeOrgModal.mergeRemainingLeads = [];
                    this.mergeOrgModal.mergeMapper = [];
                },
                removeDuplicates(array) {
                    return Array.from(new Set(array.map(a => a.id)))
                        .map(id => {
                            return array.find(a => a.id === id)
                        });
                },
                mergeLeads(leadsToBeMerged) {
                    this.initializeMergeModal();
                    leadsToBeMerged.forEach((leadId, i, a) => {
                        let promises = [customAjaxRequest(apiEndpoints.Leads.GetLeadById, 'GET', { leadId })];
                        Promise.all(promises).then(result => {
                            this.mergeOrgModal.mergeSelectLeadsInitial.push(result[0]);
                            if (result[0].organization) this.mergeOrgModal.mergeSelectOrganizationsInitial.push(result[0].organization);
                            if (result[0].contact) this.mergeOrgModal.mergeSelectContactsInitial.push(result[0].contact);
                            if (result[0].leadMembers) {
                                this.mergeOrgModal.mergeSelectLeadMembersInitial.push(...result[0].leadMembers.filter(el => el.teamRoleId === this.defaultTeamRoleId));
                                this.mergeOrgModal.mergeSelectOwnersInitial.push(...result[0].leadMembers.filter(el => el.teamRoleId === this.defaultOwnerRoleId));
                            }
                            if (result[0].leadState) this.mergeOrgModal.mergeSelectLeadStatesInitial.push(result[0].leadState);
                            if (result[0].product) this.mergeOrgModal.mergeSelectProductsInitial.push(result[0].product);
                            if (result[0].serviceType) this.mergeOrgModal.mergeSelectServiceTypesInitial.push(result[0].serviceType);
                            if (result[0].solutionType) this.mergeOrgModal.mergeSelectSolutionTypesInitial.push(result[0].solutionType);
                            if (result[0].source) this.mergeOrgModal.mergeSelectSourcesInitial.push(result[0].source);
                            if (result[0].team) this.mergeOrgModal.mergeSelectTeamsInitial.push(result[0].team);
                            if (result[0].technologyType) this.mergeOrgModal.mergeSelectTechnologyTypesInitial.push(result[0].technologyType);

                            this.mergeOrgModal.mergeMapper.push({
                                leadId: result[0].id,
                                organizationId: result[0].organizationId,
								leadMembers: result[0].leadMembers.filter(el => el.teamRoleId === this.defaultTeamRoleId).map(x => x.id),
								owners: result[0].leadMembers.filter(el => el.teamRoleId === this.defaultOwnerRoleId).map(x => x.id),
                                leadStateId: result[0].leadStateId,
                                productId: result[0].productId,
                                contactId: result[0].contactId,
                                serviceTypeId: result[0].serviceTypeId,
                                solutionTypeId: result[0].solutionTypeId,
                                sourceId: result[0].sourceId,
                                teamId: result[0].teamId,
                                technologyTypeId: result[0].technologyTypeId
                            });

                            if (i === a.length - 1) {
                                this.mergeOrgModal.mergeSelectLeads = this.mergeOrgModal.mergeSelectLeadsInitial;
                                this.mergeOrgModal.mergeSelectOrganizations = this.removeDuplicates(this.mergeOrgModal.mergeSelectOrganizationsInitial);
                                this.mergeOrgModal.mergeSelectContacts = this.mergeOrgModal.mergeSelectContactsInitial;
                                this.mergeOrgModal.mergeSelectLeadStates = this.removeDuplicates(this.mergeOrgModal.mergeSelectLeadStatesInitial);
                                this.mergeOrgModal.mergeSelectLeadMembers = this.removeDuplicates(this.mergeOrgModal.mergeSelectLeadMembersInitial);
                                this.mergeOrgModal.mergeSelectOwners = this.removeDuplicates(this.mergeOrgModal.mergeSelectOwnersInitial);
                                this.mergeOrgModal.mergeSelectProducts = this.mergeOrgModal.mergeSelectProductsInitial;
                                this.mergeOrgModal.mergeSelectServiceTypes = this.removeDuplicates(this.mergeOrgModal.mergeSelectServiceTypesInitial);
                                this.mergeOrgModal.mergeSelectSolutionTypes = this.removeDuplicates(this.mergeOrgModal.mergeSelectSolutionTypesInitial);
                                this.mergeOrgModal.mergeSelectSources = this.removeDuplicates(this.mergeOrgModal.mergeSelectSourcesInitial);
                                this.mergeOrgModal.mergeSelectTeams = this.removeDuplicates(this.mergeOrgModal.mergeSelectTeamsInitial);
                                this.mergeOrgModal.mergeSelectTechnologyTypes = this.removeDuplicates(this.mergeOrgModal.mergeSelectTechnologyTypesInitial);
                                //let promiseForTeamMembers = [customAjaxRequest(apiEndpoints.Team.GetAllTeam)]
                                $(`#${this.modalLeadMerge.id}`).modal("show");
                            }
                        }).catch(e => {
                            toast.notifyErrorList(e);
                        });
                    });
                },
                action(action) {
					var leadName = this.$store.state.allLeads.find(l => l.id == action.value[0]).name.split(' ').join('_');
                    switch (action.key) {
                        case 'deactivate': {
                            this.deactivateLeads(action.value);
                            break;
                        } case 'activate': {
                            this.activateLeads(action.value);
                            break;
                        } case 'edit': {
							this.editLead(action.value[0], leadName);
                            break;
                        } case 'addTask': {
                            this.addTask(action.value[0]);
                            break;
                        } case 'delete': {
                            this.deleteLeads(action.value);
                            break;
                        } case 'moveToStage': {
                            this.changeLeadStage(action.value[0]);
                            break;
                        } case 'updateStatus': {
                            this.changeLeadState(action.value[0]);
                            break;
                        } case 'setTeam': {
                            this.changeLeadTeam(action.value[0]);
                            break;
                        } case 'generateDoc': {
                            this.addDocument(action.value[0]);
                            break;
                        } case 'details': {
							window.location.href = '/' + pipeLineObj.name.split(' ').join('_') + '/leads/details?lead=' + leadName + '&id=' + action.value[0];
                            break;
                        } case 'merge': {
                            this.mergeLeads(action.value);
                        }
                    }
                },
                extractTeamOwnerName(team) {
                    let owner = utils.findObjectByPropValue(team, this.defaultOwnerRoleId, 'teamRoleId');
                    let teamOwnerName = {
                        initials: '',
                        fullName: '',
                    }
                    if (owner) {
                        teamOwnerName = {
                            initials: this.initials(owner.firstName, owner.lastName),
                            fullName: `${owner.firstName} ${owner.lastName}`
                        }
                    }
                    return teamOwnerName;
                },
                extractTeam(team, roleId) {
                    let returnArray = [];
                    team.forEach(m => {
                        if (m.teamRoleId == roleId) {
                            returnArray.push({
                                initials: this.initials(m.firstName, m.lastName),
                                fullName: `${m.firstName ? m.firstName : ''} ${m.lastName ? m.lastName : ''}`
                            });
                        }
                    });
                    return returnArray;
                },
                extractTeamIds(team, roleId) {
                    let returnArray = [];
                    if (team) {
                        team.forEach(m => {
                            if (m.teamRoleId == roleId) {
                                returnArray.push(m.userId);
                            }
                        });
                    }
                    return returnArray;
                },
                addLeadByStage(prop) {
                    this.resetLeadModalValues();
                    this.editableLeadModal = false;
                    this.isAddByStage = true;
                    this.currentStage = prop;
                    this.modalLeadKey++;
                    $(`#${this.modalLeadProps.id}`).modal("show");
                },
                initials(name, surname) {
                    return name && surname ? `${name.charAt(0)} ${surname.charAt(0)}` : '--';
                },
                fillLeads(leads) {
                    this.leads = leads;
                },
                t(key) {
                    return t(key)
                },
				searchTable(val) {
                    clearTimeout(this.searchTimeoutId);
                    this.searchTimeoutId = setTimeout(() => {
                        if (val.length > 2) {
                        this.searchString = val;
                        this.tableKey++;
                        } else if (val === '') {
                        this.searchString = '';
                        this.tableKey++;
                        }
                    }, 500);
				},
                filterResult(val) {
                    this.pageRequestFilters = [];
                    val.forEach(f => {
                        f.values.forEach(v => {
                            if (v.active) {
                                this.pageRequestFilters.push({
                                    Propriety: f.id,
                                    Value: v.value
                                });
                            }
                        });
                    });
                    this.tableKey++;
                },
                modifiedFiltersResult(data) {
                    const requestData = this.createQueryParams(data);
                    requestData.pipelineId = this.pipelineId;
					this.$store.dispatch('getGridLeadsByPipelineId', requestData);
                },
                createQueryParams(data) {
                    const requestData = {};
                    requestData.filters = [];
					for (var filterGroup in data) {
                        data[filterGroup].forEach(group => {
                            requestData.filters.push({
                                Propriety: group.id,
                                Value: group.value
                            })
                        })
					}
                    return requestData;
                },
				getLeadData() {
                    if (!this.pipelinesListSelect.length) {
						this.$store.dispatch('getAllPipelinesForSelect');
					}
					if (!this.currenciesListSelect.length) {
						this.$store.dispatch('getAllCurrencies');
					}
					if (!this.sourceTypesListSelect.length) {
						this.$store.dispatch('getAllSource');
					}
					if (!this.technologyTypesListSelect.length) {
						this.$store.dispatch('getAllTechnologyTypes');
					}
					if (!this.solutionTypesListSelect.length) {
						this.$store.dispatch('getAllSolutionTypes');
                    }
                    if (!this.serviceTypesListSelect.length) {
						this.$store.dispatch('getAllServiceTypes');
					}
                },
                getDocumentData() {
					if (!this.contractTemplatesSelect.length) {
						this.$store.dispatch('getAllContractTemlate');
                    }
                    if (!this.productsSelect.length) {
						this.$store.dispatch('getAllProducts');
                    }
                    if (!this.allAgreements.length) {
						this.$store.dispatch('getAllAgreements');
					}
                },
				getOrgData() {
                    if (!this.countries.length) {
						this.$store.dispatch('getAllCountries');
					}
					if (!this.employeesSelect.length) {
						this.$store.dispatch('getAllEmployees');
					}
					if (!this.listIndustry.length) {
				        this.$store.dispatch('getAllSelectorsForOrganization');
					}
					if (!this.emailLabelsFromStore.length) {
						this.$store.dispatch('getAllEmailLabels');
					}
				},
				getContactsData() {
					if (!this.emailLabelsFromStore.length) {
						this.$store.dispatch('getAllEmailLabels');
					}
					if (!this.phoneLabels.length) {
						this.$store.dispatch('getAllPhoneLabels');
					}
					if (!this.jobPositionsListSelect.length) {
						const promises = [
							customAjaxRequest(apiEndpoints.JobPosition.GetAllJobPositions),
						];
						Promise.all(promises).then(result => {
							this.jobPositionsListSelect = this.convertToSelectList(result[0]);
						});
					}
                },
				getTaskData() {
					if (!this.taskStatuses.length) {
						this.$store.dispatch('getAllTaskStatusList');
					}
					if (!this.taskPriorities.length) {
						this.$store.dispatch('getAllTaskPriorityList');
					}
                },
            },
			mounted() {
				window.addEventListener('popstate', (event) => {
                    this.pageChange++;
                    console.log('leads');
				});
			},
        });
        Vue.component('PipelineGrid', {
            template: "#pipeline-grid-template",
            data() {
                return {
                    dragOptions: {
                        dropzoneSelector: 'ul',
						newPipeLine: null,
                        draggableSelector: 'li',
                        handlerSelector: null,
                        reactivityEnabled: true,
                        multipleDropzonesItemsDraggingEnabled: true,
                        showDropzoneAreas: true,
                        onDrop: function (event) {
                        },
                        onDragstart: function (event) { },
                        onDragenter: function (event) { },
                        onDragover: function (event) { },
                        onDragend: async function (event) {
                            const stageId = $(event.droptarget).data('stage-id');
							console.log($(event.droptarget).data('stage-id'));
                            const leadId = $(event.items[0]).data('lead-id');
                            customAjaxRequest(apiEndpoints.Leads.MoveLeadToStage, 'post', { leadId, stageId })
                            .catch(e => {
                                event.stop();
                                toast.notifyErrorList(e);
                            })
                        }
                    },
                }
            },
            props: {
                pipelineId: String,
                actions: Object,
                pipelineStagesListSelect: Array,
                stages: Array,
                listView: Boolean
            },
			created() {
                this.$store.dispatch('getGridLeadsByPipelineId', { pipelineId: this.pipelineId });
            },
            computed: {
                allLeads() {
                    return this.$store.state.gridLeads;
                },
                dataLoaded() {
                    return this.allLeads.length;
                }
            },
            methods: {
                addLeadByStage(prop) {
                   this.$emit('addLeadByStage', prop);
                },
                actionEmit({ key, value }) {
                    this.$emit('action', { key, value });
                },
                leadProductOrService(productOrServiceList) {
                    if (productOrServiceList.length === 1) {
						if (productOrServiceList[0].productType) {
							return productOrServiceList[0].productType.name;
						} else if (productOrServiceList[0].serviceType) {
                            return productOrServiceList[0].serviceType.name;
                        } else if (productOrServiceList[0].technologyType) {
							return productOrServiceList[0].technologyType.name;
						}
                    }
                    return `Products/Services: ${productOrServiceList.length}`;
                },
                formattedDeadline(deadline) {
                    return moment(deadline, 'DD.MM.YYYY').format('DD MMM YYYY');
				}
            }
        });
	</script>
	<script type="text/x-template" id="pipeline-template">
		<div>
			<PageOptionsBar :searcheable="listView"
							:pageOptionsComponents="pageOptionsComponents"
							@@searchInput="searchTable"
							:filters="tableFilters"
							@@filterResult="filterResult"
							:modifiedFilters="gridFilters"
							@@modifiedFiltersResult="modifiedFiltersResult" />
			<div v-if="listView">
				<Table :fields="tableFields"
					   :apiUrl="apiUrl"
					   :httpMethod="httpMethod"
					   @@triggeredMenuAction="action"
					   tableId="organizations-table"
					   :sortOrder="tableConfig.sortCol"
					   :initialPageSize="20"
					   :reload="tableKey"
					   dataPath="result.result"
					   :customQueryparams="customQueryparams"
					   :hasCustomQUeryparams="true"
                       :controller="getControllerName"
                       :pageChange="pageChange"
				       :changeUrl="true"
					   @@onLoad="fillLeads"
					   :actionsSingle="tableActions.single"
					   :actionsSingleDisabled="tableActions.singleDisabled"
					   :actionsMultiple="tableActions.multiple"
					   :actionsMultipleDisabled="tableActions.multipleDisabled"
					   :haveContextMenu="true">
					<slot slot="name" slot-scope="props">
				        <a :href="'/'+props.rowData.pipeLine.name.split(' ').join('_')+'/leads/details?lead=' + props.rowData.name.split(' ').join('_') + '&id=' + props.rowData.id" @@click.stop>
							{{ props.rowData.name }}
						</a>
					</slot>
					<slot slot="stage" slot-scope="props">
						{{ props.rowData.stage.name }}
					</slot>
					<slot slot="value" slot-scope="props">
						{{ props.rowData.value.toLocaleString()}}
					</slot>
					<slot v-if="props.rowData.currency" slot="currency" slot-scope="props">
						{{ props.rowData.currency.name }}
					</slot>
					<slot v-if="props.rowData.leadState" slot="leadState" slot-scope="props">
						<span class="badge" :class="'badge-' + props.rowData.leadState.stateStyleClass">
							{{  props.rowData.leadState.name }}
						</span>
					</slot>
					<slot slot="organizationName" slot-scope="props">
						<a v-if="props.rowData.organizationId" :href="'/organizations/details?id=' + props.rowData.organizationId" target="_blank" @@click.stop>
							{{ props.rowData.organizationName }}
						</a>
					</slot>
				</Table>
				<div v-if="!dataLoaded && listView" class="group-loader"><Loader /></div>
			</div>
			<div v-else>
				<PipelineGrid :key="tableKey"
							  @@addLeadByStage="addLeadByStage"
							  :pipelineId="pipelineId"
							  :actions="tableActions.single"
							  @@action="action"
							  :stages="stages"
							  :pipelineStagesListSelect="pipelineStagesListSelect"
							  :listView="listView" />
			</div>
			<Modal :modalProps="modalLeadProps" @@newValue="emitValueLead" :refreshInputs="refreshInputs" :inputsKey="modalLeadKey" @@getData="getLeadData" />
			<Modal :modalProps="modalStageLead" @@newValue="emitValueStageUpdate" :refreshInputs="refreshInputs" :inputsKey="modalStageKey" />
			<Modal :modalProps="modalStateLead" @@newValue="emitValueLeadChanges" :refreshInputs="refreshInputs" :inputsKey="modalStateKey" />
			<Modal :modalProps="modalNoGoState" @@newValue="emitNoGoStateChanges" :refreshInputs="refreshInputs" :inputsKey="modalNoGoStateKey" />
			<Modal :modalProps="modalTeamLead" @@newValue="emitValueLeadChanges" :refreshInputs="refreshInputs" :inputsKey="modalTeamKey" />
			<Modal :modalProps="modalTaskProps" @@newValue="emitValueTaskChanges" :refreshInputs="refreshInputs" :inputsKey="modalTaskKey" @@getData="getTaskData" />
			<Modal :modalProps="modalLeadMerge" @@newValue="emitValueLeadMerge" :refreshInputs="refreshInputs" />
			<Modal :refreshInputs="refreshInputs" :modalProps="modalDocument" @@newValue="emitModalDocumentValue" :inputsKey="modalDocumentKey" @@getData="getDocumentData" />
			<Modal :refreshInputs="refreshInputs" :modalProps="modalsameOrgAgreements" :inputsKey="modalsameOrgKey" />
			<Modal :refreshInputs="refreshInputs" :modalProps="modalImportLead" @@newValue="importLead" :inputsKey="modalImportKey" />
			<Modal :modalProps="modalOrgProps" @@newValue="emitValueOrg" :refreshInputs="refreshInputs" :inputsKey="modalOrgKey" @@getData="getOrgData" />
			<Modal :refreshInputs="refreshInputs" :modalProps="modalContactProps" @@newValue="emitValueContact" :inputsKey="modalContactKey" @@getData="getContactsData" />
		</div>
	</script>
	<script type="text/x-template" id="pipeline-grid-template">
		<div v-drag-and-drop:options="dragOptions">
			<handy-scroll>
				<div class="row flex-nowrap pipeline-grid">
					<div v-for="leadStage in allLeads"
						 :key="leadStage.stageName"
						 :id="leadStage.stageName"
						 class="col-12 col-sm-6 col-md-4 col-lg-3 pipeline-section px-0">
						<div class="pipeline-header">
							<div>
								<h3>
									{{ leadStage.stageName }}
								</h3>
								<div class="pipeline-header__info">
									<span>
										{{ leadStage.leadsInStage?.length || 0 }} opportunities
									</span>
									<span>
										{{ +(leadStage.leadsInStage?.reduce((acc, lead) => acc + lead.globalCurrencyValue, 0)).toFixed(2) }}
										@ViewBag.GlobalCurrencySymbol
									</span>
								</div>
							</div>
						</div>
						<ul :data-stage-id="leadStage.stageId" class="list-unstyled pipeline-list">
							<li class="pipeline-opportunity"
								v-for="lead in leadStage.leadsInStage"
								:key="lead.id"
								:data-lead-id="lead.id">
								<div>
                                    <a :href="'/'+lead.pipeLine.name.split(' ').join('_')+'/leads/details?lead=' + lead.name.split(' ').join('_') + '&id=' + lead.id" @@click.stop>
										{{ lead.name }}
									</a>
									<div class="pipeline-opportunity__info">
										<p><img src="/themes/gear/img/company.svg" /> Organization: {{ lead.organization.name }}</p>
										<p v-if="lead.ownerId">
											<img src="/themes/gear/img/user.svg" class="mr-1px" />
											Owner: {{ lead.owner }}
										</p>
										<p v-if="lead.productOrServiceList?.length">
											<img src="/themes/gear/img/cpu.svg" />
											{{ leadProductOrService(lead.productOrServiceList) }}
										</p>
										<p v-if="lead.deadLine">
											<img src="/themes/gear/img/clock.svg" />
											{{ formattedDeadline(lead.deadLine) }}
										</p>
										<p v-if="lead.currencyCode ?? lead.value">
											{{ lead.currencyCode }} {{ lead.value }}
										</p>
									</div>
									<hr class="hr-description pipeline-opportunity__hr" />
									<div class="pipeline-opportunity__info pipeline-footer">
										<p class="mb-0">Days in stage: {{ lead.daysInStage }}</p>
										<Dropdown :actions="actions"
												  :id="lead.id"
												  @@actionEmit="actionEmit" />
									</div>
								</div>
							</li>
						</ul>
					</div>
				</div>
			</handy-scroll>
			<div v-if="!dataLoaded && !listView" class="group-loader"><Loader /></div>
		</div>
	</script>
}
